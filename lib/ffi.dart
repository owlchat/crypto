// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Owlchat Crypto Binding
class RawOwlchatCrypto {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RawOwlchatCrypto(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RawOwlchatCrypto.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// This a Dart FFI interface to be called inside an Isolate.
  ///
  /// Passing a Isolate Port, along with some Protobuf payload, to this function will
  /// process the payload and return the result to the isolate over the port.
  ///
  /// # Errors
  ///
  /// This function will return an error if the provided payload is not valid.
  ///
  /// # Safety
  ///
  /// This function is unsafe because it deals with raw pointers.
  int owlchat_crypto_dispatch(
    RawKeyPair keypair,
    int port,
    ffi.Pointer<ffi.Uint8> data,
    int len,
  ) {
    return _owlchat_crypto_dispatch(
      keypair,
      port,
      data,
      len,
    );
  }

  late final _owlchat_crypto_dispatchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(RawKeyPair, ffi.Int64, ffi.Pointer<ffi.Uint8>,
              uintptr_t)>>('owlchat_crypto_dispatch');
  late final _owlchat_crypto_dispatch = _owlchat_crypto_dispatchPtr
      .asFunction<int Function(RawKeyPair, int, ffi.Pointer<ffi.Uint8>, int)>();

  /// Drops a [crypto::KeyPair]
  ///
  /// # Safety
  /// Make sure that the pointer is valid.
  void owlchat_crypto_keypair_drop(
    RawKeyPair pair,
  ) {
    return _owlchat_crypto_keypair_drop(
      pair,
    );
  }

  late final _owlchat_crypto_keypair_dropPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(RawKeyPair)>>(
          'owlchat_crypto_keypair_drop');
  late final _owlchat_crypto_keypair_drop =
      _owlchat_crypto_keypair_dropPtr.asFunction<void Function(RawKeyPair)>();

  /// Creates a new [crypto::KeyPair] and return an opaque pointer to it.
  /// # Safety
  ///
  /// You must call [owlchat_crypto_keypair_drop] once you are done with it.
  RawKeyPair owlchat_crypto_keypair_new() {
    return _owlchat_crypto_keypair_new();
  }

  late final _owlchat_crypto_keypair_newPtr =
      _lookup<ffi.NativeFunction<RawKeyPair Function()>>(
          'owlchat_crypto_keypair_new');
  late final _owlchat_crypto_keypair_new =
      _owlchat_crypto_keypair_newPtr.asFunction<RawKeyPair Function()>();
}

abstract class OwlchatResult {
  static const int Ok = 1;
  static const int NullPointerDetected = 2;
  static const int InvalidProtobuf = 3;
}

/// A Opaque pointer to a [`cryoto::KeyPair`]
typedef RawKeyPair = ffi.Pointer<ffi.Void>;
typedef uintptr_t = ffi.Uint64;
