// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: def.proto

#include "def.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace owlchat {
constexpr KeyPair::KeyPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secret_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seed_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct KeyPairDefaultTypeInternal {
  constexpr KeyPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyPairDefaultTypeInternal() {}
  union {
    KeyPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyPairDefaultTypeInternal _KeyPair_default_instance_;
constexpr InitKeyPair::InitKeyPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : secret_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct InitKeyPairDefaultTypeInternal {
  constexpr InitKeyPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InitKeyPairDefaultTypeInternal() {}
  union {
    InitKeyPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InitKeyPairDefaultTypeInternal _InitKeyPair_default_instance_;
constexpr RestoreKeyPair::RestoreKeyPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : paper_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RestoreKeyPairDefaultTypeInternal {
  constexpr RestoreKeyPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RestoreKeyPairDefaultTypeInternal() {}
  union {
    RestoreKeyPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RestoreKeyPairDefaultTypeInternal _RestoreKeyPair_default_instance_;
constexpr BackupKeyPair::BackupKeyPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : maybe_seed_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BackupKeyPairDefaultTypeInternal {
  constexpr BackupKeyPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BackupKeyPairDefaultTypeInternal() {}
  union {
    BackupKeyPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BackupKeyPairDefaultTypeInternal _BackupKeyPair_default_instance_;
constexpr ValidateMnemonic::ValidateMnemonic(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : phrase_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ValidateMnemonicDefaultTypeInternal {
  constexpr ValidateMnemonicDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ValidateMnemonicDefaultTypeInternal() {}
  union {
    ValidateMnemonic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ValidateMnemonicDefaultTypeInternal _ValidateMnemonic_default_instance_;
constexpr Encrypt::Encrypt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : plaintext_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct EncryptDefaultTypeInternal {
  constexpr EncryptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EncryptDefaultTypeInternal() {}
  union {
    Encrypt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EncryptDefaultTypeInternal _Encrypt_default_instance_;
constexpr Decrypt::Decrypt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ciphertext_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DecryptDefaultTypeInternal {
  constexpr DecryptDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DecryptDefaultTypeInternal() {}
  union {
    Decrypt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DecryptDefaultTypeInternal _Decrypt_default_instance_;
constexpr Sign::Sign(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SignDefaultTypeInternal {
  constexpr SignDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SignDefaultTypeInternal() {}
  union {
    Sign _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SignDefaultTypeInternal _Sign_default_instance_;
constexpr Verify::Verify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sig_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VerifyDefaultTypeInternal {
  constexpr VerifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VerifyDefaultTypeInternal() {}
  union {
    Verify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VerifyDefaultTypeInternal _Verify_default_instance_;
constexpr DiffieHellmanKeyExchange::DiffieHellmanKeyExchange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : their_public_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DiffieHellmanKeyExchangeDefaultTypeInternal {
  constexpr DiffieHellmanKeyExchangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiffieHellmanKeyExchangeDefaultTypeInternal() {}
  union {
    DiffieHellmanKeyExchange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiffieHellmanKeyExchangeDefaultTypeInternal _DiffieHellmanKeyExchange_default_instance_;
constexpr Request::Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct RequestDefaultTypeInternal {
  constexpr RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestDefaultTypeInternal _Request_default_instance_;
constexpr Response::Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ResponseDefaultTypeInternal {
  constexpr ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace owlchat
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_def_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_def_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_def_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_def_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::owlchat::KeyPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::owlchat::KeyPair, public_key_),
  PROTOBUF_FIELD_OFFSET(::owlchat::KeyPair, secret_key_),
  PROTOBUF_FIELD_OFFSET(::owlchat::KeyPair, seed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::owlchat::InitKeyPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::owlchat::InitKeyPair, secret_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::owlchat::RestoreKeyPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::owlchat::RestoreKeyPair, paper_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::owlchat::BackupKeyPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::owlchat::BackupKeyPair, maybe_seed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::owlchat::ValidateMnemonic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::owlchat::ValidateMnemonic, phrase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::owlchat::Encrypt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::owlchat::Encrypt, plaintext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::owlchat::Decrypt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::owlchat::Decrypt, ciphertext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::owlchat::Sign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::owlchat::Sign, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::owlchat::Verify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::owlchat::Verify, public_key_),
  PROTOBUF_FIELD_OFFSET(::owlchat::Verify, msg_),
  PROTOBUF_FIELD_OFFSET(::owlchat::Verify, sig_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::owlchat::DiffieHellmanKeyExchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::owlchat::DiffieHellmanKeyExchange, their_public_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::owlchat::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::owlchat::Request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::owlchat::Request, body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::owlchat::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::owlchat::Response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::owlchat::Response, body_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::owlchat::KeyPair)},
  { 8, -1, sizeof(::owlchat::InitKeyPair)},
  { 14, -1, sizeof(::owlchat::RestoreKeyPair)},
  { 20, -1, sizeof(::owlchat::BackupKeyPair)},
  { 26, -1, sizeof(::owlchat::ValidateMnemonic)},
  { 32, -1, sizeof(::owlchat::Encrypt)},
  { 38, -1, sizeof(::owlchat::Decrypt)},
  { 44, -1, sizeof(::owlchat::Sign)},
  { 50, -1, sizeof(::owlchat::Verify)},
  { 58, -1, sizeof(::owlchat::DiffieHellmanKeyExchange)},
  { 64, -1, sizeof(::owlchat::Request)},
  { 80, -1, sizeof(::owlchat::Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::owlchat::_KeyPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::owlchat::_InitKeyPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::owlchat::_RestoreKeyPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::owlchat::_BackupKeyPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::owlchat::_ValidateMnemonic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::owlchat::_Encrypt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::owlchat::_Decrypt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::owlchat::_Sign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::owlchat::_Verify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::owlchat::_DiffieHellmanKeyExchange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::owlchat::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::owlchat::_Response_default_instance_),
};

const char descriptor_table_protodef_def_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tdef.proto\022\007owlchat\032\033google/protobuf/em"
  "pty.proto\"\?\n\007KeyPair\022\022\n\npublic_key\030\001 \001(\014"
  "\022\022\n\nsecret_key\030\002 \001(\014\022\014\n\004seed\030\003 \001(\014\"!\n\013In"
  "itKeyPair\022\022\n\nsecret_key\030\001 \001(\014\"#\n\016Restore"
  "KeyPair\022\021\n\tpaper_key\030\001 \001(\t\"#\n\rBackupKeyP"
  "air\022\022\n\nmaybe_seed\030\001 \001(\014\"\"\n\020ValidateMnemo"
  "nic\022\016\n\006phrase\030\001 \001(\t\"\034\n\007Encrypt\022\021\n\tplaint"
  "ext\030\001 \001(\014\"\035\n\007Decrypt\022\022\n\nciphertext\030\001 \001(\014"
  "\"\023\n\004Sign\022\013\n\003msg\030\001 \001(\014\"6\n\006Verify\022\022\n\npubli"
  "c_key\030\001 \001(\014\022\013\n\003msg\030\002 \001(\014\022\013\n\003sig\030\003 \001(\014\"4\n"
  "\030DiffieHellmanKeyExchange\022\030\n\020their_publi"
  "c_key\030\001 \001(\014\"\353\003\n\007Request\0223\n\021generate_key_"
  "pair\030\001 \001(\0132\026.google.protobuf.EmptyH\000\022-\n\r"
  "init_key_pair\030\002 \001(\0132\024.owlchat.InitKeyPai"
  "rH\000\0223\n\020restore_key_pair\030\003 \001(\0132\027.owlchat."
  "RestoreKeyPairH\000\0221\n\017backup_key_pair\030\004 \001("
  "\0132\026.owlchat.BackupKeyPairH\000\0226\n\021validate_"
  "mnemonic\030\005 \001(\0132\031.owlchat.ValidateMnemoni"
  "cH\000\022#\n\007encrypt\030\006 \001(\0132\020.owlchat.EncryptH\000"
  "\022#\n\007decrypt\030\007 \001(\0132\020.owlchat.DecryptH\000\022\035\n"
  "\004sign\030\010 \001(\0132\r.owlchat.SignH\000\022!\n\006verify\030\t"
  " \001(\0132\017.owlchat.VerifyH\000\022H\n\033diffie_hellma"
  "n_key_exchange\030\n \001(\0132!.owlchat.DiffieHel"
  "lmanKeyExchangeH\000B\006\n\004body\"\311\003\n\010Response\022("
  "\n\005error\030\001 \001(\0162\027.owlchat.Response.ErrorH\000"
  "\022$\n\010key_pair\030\002 \001(\0132\020.owlchat.KeyPairH\000\022\022"
  "\n\010mnemonic\030\003 \001(\tH\000\022\030\n\016valid_mnemonic\030\004 \001"
  "(\010H\000\022\033\n\021encrypted_message\030\005 \001(\014H\000\022\033\n\021dec"
  "rypted_message\030\006 \001(\014H\000\022\023\n\tsignature\030\007 \001("
  "\014H\000\022\031\n\017valid_signature\030\010 \001(\010H\000\022\027\n\rshared"
  "_secret\030\t \001(\014H\000\"\263\001\n\005Error\022\013\n\007UNKNOWN\020\000\022\030"
  "\n\024MISSING_REQUEST_BODY\020\001\022\026\n\022INVALID_PUBL"
  "IC_KEY\020\002\022\026\n\022INVALID_SECRET_KEY\020\003\022\025\n\021INVA"
  "LID_SIGNATURE\020\004\022\020\n\014INVALID_SEED\020\005\022\025\n\021INV"
  "ALID_PAPER_KEY\020\006\022\023\n\017NOT_INITIALIZED\020\007B\006\n"
  "\004bodyB\003\370\001\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_def_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_def_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_def_2eproto = {
  false, false, 1418, descriptor_table_protodef_def_2eproto, "def.proto", 
  &descriptor_table_def_2eproto_once, descriptor_table_def_2eproto_deps, 1, 12,
  schemas, file_default_instances, TableStruct_def_2eproto::offsets,
  file_level_metadata_def_2eproto, file_level_enum_descriptors_def_2eproto, file_level_service_descriptors_def_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_def_2eproto_getter() {
  return &descriptor_table_def_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_def_2eproto(&descriptor_table_def_2eproto);
namespace owlchat {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Response_Error_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_def_2eproto);
  return file_level_enum_descriptors_def_2eproto[0];
}
bool Response_Error_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Response_Error Response::UNKNOWN;
constexpr Response_Error Response::MISSING_REQUEST_BODY;
constexpr Response_Error Response::INVALID_PUBLIC_KEY;
constexpr Response_Error Response::INVALID_SECRET_KEY;
constexpr Response_Error Response::INVALID_SIGNATURE;
constexpr Response_Error Response::INVALID_SEED;
constexpr Response_Error Response::INVALID_PAPER_KEY;
constexpr Response_Error Response::NOT_INITIALIZED;
constexpr Response_Error Response::Error_MIN;
constexpr Response_Error Response::Error_MAX;
constexpr int Response::Error_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class KeyPair::_Internal {
 public:
};

KeyPair::KeyPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:owlchat.KeyPair)
}
KeyPair::KeyPair(const KeyPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret_key().empty()) {
    secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret_key(), 
      GetArenaForAllocation());
  }
  seed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_seed().empty()) {
    seed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_seed(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:owlchat.KeyPair)
}

inline void KeyPair::SharedCtor() {
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
seed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KeyPair::~KeyPair() {
  // @@protoc_insertion_point(destructor:owlchat.KeyPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KeyPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  seed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyPair::ArenaDtor(void* object) {
  KeyPair* _this = reinterpret_cast< KeyPair* >(object);
  (void)_this;
}
void KeyPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyPair::Clear() {
// @@protoc_insertion_point(message_clear_start:owlchat.KeyPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmpty();
  secret_key_.ClearToEmpty();
  seed_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes secret_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_secret_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes seed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_seed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:owlchat.KeyPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  // bytes secret_key = 2;
  if (!this->_internal_secret_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_secret_key(), target);
  }

  // bytes seed = 3;
  if (!this->_internal_seed().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_seed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:owlchat.KeyPair)
  return target;
}

size_t KeyPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:owlchat.KeyPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // bytes secret_key = 2;
  if (!this->_internal_secret_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_secret_key());
  }

  // bytes seed = 3;
  if (!this->_internal_seed().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_seed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KeyPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyPair::GetClassData() const { return &_class_data_; }

void KeyPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<KeyPair *>(to)->MergeFrom(
      static_cast<const KeyPair &>(from));
}


void KeyPair::MergeFrom(const KeyPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:owlchat.KeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (!from._internal_secret_key().empty()) {
    _internal_set_secret_key(from._internal_secret_key());
  }
  if (!from._internal_seed().empty()) {
    _internal_set_seed(from._internal_seed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyPair::CopyFrom(const KeyPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:owlchat.KeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyPair::IsInitialized() const {
  return true;
}

void KeyPair::InternalSwap(KeyPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, GetArenaForAllocation(),
      &other->public_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secret_key_, GetArenaForAllocation(),
      &other->secret_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &seed_, GetArenaForAllocation(),
      &other->seed_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_def_2eproto_getter, &descriptor_table_def_2eproto_once,
      file_level_metadata_def_2eproto[0]);
}

// ===================================================================

class InitKeyPair::_Internal {
 public:
};

InitKeyPair::InitKeyPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:owlchat.InitKeyPair)
}
InitKeyPair::InitKeyPair(const InitKeyPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret_key().empty()) {
    secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:owlchat.InitKeyPair)
}

inline void InitKeyPair::SharedCtor() {
secret_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InitKeyPair::~InitKeyPair() {
  // @@protoc_insertion_point(destructor:owlchat.InitKeyPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InitKeyPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  secret_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitKeyPair::ArenaDtor(void* object) {
  InitKeyPair* _this = reinterpret_cast< InitKeyPair* >(object);
  (void)_this;
}
void InitKeyPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitKeyPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InitKeyPair::Clear() {
// @@protoc_insertion_point(message_clear_start:owlchat.InitKeyPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secret_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitKeyPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes secret_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_secret_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitKeyPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:owlchat.InitKeyPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes secret_key = 1;
  if (!this->_internal_secret_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_secret_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:owlchat.InitKeyPair)
  return target;
}

size_t InitKeyPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:owlchat.InitKeyPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes secret_key = 1;
  if (!this->_internal_secret_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_secret_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InitKeyPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InitKeyPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InitKeyPair::GetClassData() const { return &_class_data_; }

void InitKeyPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<InitKeyPair *>(to)->MergeFrom(
      static_cast<const InitKeyPair &>(from));
}


void InitKeyPair::MergeFrom(const InitKeyPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:owlchat.InitKeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_secret_key().empty()) {
    _internal_set_secret_key(from._internal_secret_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InitKeyPair::CopyFrom(const InitKeyPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:owlchat.InitKeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitKeyPair::IsInitialized() const {
  return true;
}

void InitKeyPair::InternalSwap(InitKeyPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secret_key_, GetArenaForAllocation(),
      &other->secret_key_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InitKeyPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_def_2eproto_getter, &descriptor_table_def_2eproto_once,
      file_level_metadata_def_2eproto[1]);
}

// ===================================================================

class RestoreKeyPair::_Internal {
 public:
};

RestoreKeyPair::RestoreKeyPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:owlchat.RestoreKeyPair)
}
RestoreKeyPair::RestoreKeyPair(const RestoreKeyPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  paper_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paper_key().empty()) {
    paper_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_paper_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:owlchat.RestoreKeyPair)
}

inline void RestoreKeyPair::SharedCtor() {
paper_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RestoreKeyPair::~RestoreKeyPair() {
  // @@protoc_insertion_point(destructor:owlchat.RestoreKeyPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RestoreKeyPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  paper_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RestoreKeyPair::ArenaDtor(void* object) {
  RestoreKeyPair* _this = reinterpret_cast< RestoreKeyPair* >(object);
  (void)_this;
}
void RestoreKeyPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RestoreKeyPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RestoreKeyPair::Clear() {
// @@protoc_insertion_point(message_clear_start:owlchat.RestoreKeyPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paper_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RestoreKeyPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string paper_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_paper_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "owlchat.RestoreKeyPair.paper_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestoreKeyPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:owlchat.RestoreKeyPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string paper_key = 1;
  if (!this->_internal_paper_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_paper_key().data(), static_cast<int>(this->_internal_paper_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "owlchat.RestoreKeyPair.paper_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_paper_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:owlchat.RestoreKeyPair)
  return target;
}

size_t RestoreKeyPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:owlchat.RestoreKeyPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string paper_key = 1;
  if (!this->_internal_paper_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paper_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RestoreKeyPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RestoreKeyPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RestoreKeyPair::GetClassData() const { return &_class_data_; }

void RestoreKeyPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RestoreKeyPair *>(to)->MergeFrom(
      static_cast<const RestoreKeyPair &>(from));
}


void RestoreKeyPair::MergeFrom(const RestoreKeyPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:owlchat.RestoreKeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_paper_key().empty()) {
    _internal_set_paper_key(from._internal_paper_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RestoreKeyPair::CopyFrom(const RestoreKeyPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:owlchat.RestoreKeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreKeyPair::IsInitialized() const {
  return true;
}

void RestoreKeyPair::InternalSwap(RestoreKeyPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &paper_key_, GetArenaForAllocation(),
      &other->paper_key_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RestoreKeyPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_def_2eproto_getter, &descriptor_table_def_2eproto_once,
      file_level_metadata_def_2eproto[2]);
}

// ===================================================================

class BackupKeyPair::_Internal {
 public:
};

BackupKeyPair::BackupKeyPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:owlchat.BackupKeyPair)
}
BackupKeyPair::BackupKeyPair(const BackupKeyPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  maybe_seed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maybe_seed().empty()) {
    maybe_seed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_maybe_seed(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:owlchat.BackupKeyPair)
}

inline void BackupKeyPair::SharedCtor() {
maybe_seed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BackupKeyPair::~BackupKeyPair() {
  // @@protoc_insertion_point(destructor:owlchat.BackupKeyPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BackupKeyPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  maybe_seed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BackupKeyPair::ArenaDtor(void* object) {
  BackupKeyPair* _this = reinterpret_cast< BackupKeyPair* >(object);
  (void)_this;
}
void BackupKeyPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BackupKeyPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BackupKeyPair::Clear() {
// @@protoc_insertion_point(message_clear_start:owlchat.BackupKeyPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  maybe_seed_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BackupKeyPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes maybe_seed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_maybe_seed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BackupKeyPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:owlchat.BackupKeyPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes maybe_seed = 1;
  if (!this->_internal_maybe_seed().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_maybe_seed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:owlchat.BackupKeyPair)
  return target;
}

size_t BackupKeyPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:owlchat.BackupKeyPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes maybe_seed = 1;
  if (!this->_internal_maybe_seed().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_maybe_seed());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BackupKeyPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BackupKeyPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BackupKeyPair::GetClassData() const { return &_class_data_; }

void BackupKeyPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<BackupKeyPair *>(to)->MergeFrom(
      static_cast<const BackupKeyPair &>(from));
}


void BackupKeyPair::MergeFrom(const BackupKeyPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:owlchat.BackupKeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_maybe_seed().empty()) {
    _internal_set_maybe_seed(from._internal_maybe_seed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BackupKeyPair::CopyFrom(const BackupKeyPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:owlchat.BackupKeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackupKeyPair::IsInitialized() const {
  return true;
}

void BackupKeyPair::InternalSwap(BackupKeyPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &maybe_seed_, GetArenaForAllocation(),
      &other->maybe_seed_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BackupKeyPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_def_2eproto_getter, &descriptor_table_def_2eproto_once,
      file_level_metadata_def_2eproto[3]);
}

// ===================================================================

class ValidateMnemonic::_Internal {
 public:
};

ValidateMnemonic::ValidateMnemonic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:owlchat.ValidateMnemonic)
}
ValidateMnemonic::ValidateMnemonic(const ValidateMnemonic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  phrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_phrase().empty()) {
    phrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_phrase(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:owlchat.ValidateMnemonic)
}

inline void ValidateMnemonic::SharedCtor() {
phrase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ValidateMnemonic::~ValidateMnemonic() {
  // @@protoc_insertion_point(destructor:owlchat.ValidateMnemonic)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ValidateMnemonic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  phrase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ValidateMnemonic::ArenaDtor(void* object) {
  ValidateMnemonic* _this = reinterpret_cast< ValidateMnemonic* >(object);
  (void)_this;
}
void ValidateMnemonic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ValidateMnemonic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ValidateMnemonic::Clear() {
// @@protoc_insertion_point(message_clear_start:owlchat.ValidateMnemonic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phrase_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValidateMnemonic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string phrase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_phrase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "owlchat.ValidateMnemonic.phrase"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValidateMnemonic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:owlchat.ValidateMnemonic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string phrase = 1;
  if (!this->_internal_phrase().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_phrase().data(), static_cast<int>(this->_internal_phrase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "owlchat.ValidateMnemonic.phrase");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_phrase(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:owlchat.ValidateMnemonic)
  return target;
}

size_t ValidateMnemonic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:owlchat.ValidateMnemonic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string phrase = 1;
  if (!this->_internal_phrase().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_phrase());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValidateMnemonic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ValidateMnemonic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValidateMnemonic::GetClassData() const { return &_class_data_; }

void ValidateMnemonic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ValidateMnemonic *>(to)->MergeFrom(
      static_cast<const ValidateMnemonic &>(from));
}


void ValidateMnemonic::MergeFrom(const ValidateMnemonic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:owlchat.ValidateMnemonic)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_phrase().empty()) {
    _internal_set_phrase(from._internal_phrase());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValidateMnemonic::CopyFrom(const ValidateMnemonic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:owlchat.ValidateMnemonic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValidateMnemonic::IsInitialized() const {
  return true;
}

void ValidateMnemonic::InternalSwap(ValidateMnemonic* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &phrase_, GetArenaForAllocation(),
      &other->phrase_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ValidateMnemonic::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_def_2eproto_getter, &descriptor_table_def_2eproto_once,
      file_level_metadata_def_2eproto[4]);
}

// ===================================================================

class Encrypt::_Internal {
 public:
};

Encrypt::Encrypt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:owlchat.Encrypt)
}
Encrypt::Encrypt(const Encrypt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  plaintext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_plaintext().empty()) {
    plaintext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_plaintext(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:owlchat.Encrypt)
}

inline void Encrypt::SharedCtor() {
plaintext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Encrypt::~Encrypt() {
  // @@protoc_insertion_point(destructor:owlchat.Encrypt)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Encrypt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  plaintext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Encrypt::ArenaDtor(void* object) {
  Encrypt* _this = reinterpret_cast< Encrypt* >(object);
  (void)_this;
}
void Encrypt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Encrypt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Encrypt::Clear() {
// @@protoc_insertion_point(message_clear_start:owlchat.Encrypt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plaintext_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Encrypt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes plaintext = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_plaintext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Encrypt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:owlchat.Encrypt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes plaintext = 1;
  if (!this->_internal_plaintext().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_plaintext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:owlchat.Encrypt)
  return target;
}

size_t Encrypt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:owlchat.Encrypt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes plaintext = 1;
  if (!this->_internal_plaintext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_plaintext());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Encrypt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Encrypt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Encrypt::GetClassData() const { return &_class_data_; }

void Encrypt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Encrypt *>(to)->MergeFrom(
      static_cast<const Encrypt &>(from));
}


void Encrypt::MergeFrom(const Encrypt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:owlchat.Encrypt)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_plaintext().empty()) {
    _internal_set_plaintext(from._internal_plaintext());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Encrypt::CopyFrom(const Encrypt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:owlchat.Encrypt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Encrypt::IsInitialized() const {
  return true;
}

void Encrypt::InternalSwap(Encrypt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &plaintext_, GetArenaForAllocation(),
      &other->plaintext_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Encrypt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_def_2eproto_getter, &descriptor_table_def_2eproto_once,
      file_level_metadata_def_2eproto[5]);
}

// ===================================================================

class Decrypt::_Internal {
 public:
};

Decrypt::Decrypt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:owlchat.Decrypt)
}
Decrypt::Decrypt(const Decrypt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ciphertext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ciphertext().empty()) {
    ciphertext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ciphertext(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:owlchat.Decrypt)
}

inline void Decrypt::SharedCtor() {
ciphertext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Decrypt::~Decrypt() {
  // @@protoc_insertion_point(destructor:owlchat.Decrypt)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Decrypt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ciphertext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Decrypt::ArenaDtor(void* object) {
  Decrypt* _this = reinterpret_cast< Decrypt* >(object);
  (void)_this;
}
void Decrypt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Decrypt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Decrypt::Clear() {
// @@protoc_insertion_point(message_clear_start:owlchat.Decrypt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ciphertext_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Decrypt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ciphertext = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ciphertext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Decrypt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:owlchat.Decrypt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ciphertext = 1;
  if (!this->_internal_ciphertext().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ciphertext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:owlchat.Decrypt)
  return target;
}

size_t Decrypt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:owlchat.Decrypt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ciphertext = 1;
  if (!this->_internal_ciphertext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ciphertext());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Decrypt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Decrypt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Decrypt::GetClassData() const { return &_class_data_; }

void Decrypt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Decrypt *>(to)->MergeFrom(
      static_cast<const Decrypt &>(from));
}


void Decrypt::MergeFrom(const Decrypt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:owlchat.Decrypt)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ciphertext().empty()) {
    _internal_set_ciphertext(from._internal_ciphertext());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Decrypt::CopyFrom(const Decrypt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:owlchat.Decrypt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decrypt::IsInitialized() const {
  return true;
}

void Decrypt::InternalSwap(Decrypt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ciphertext_, GetArenaForAllocation(),
      &other->ciphertext_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Decrypt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_def_2eproto_getter, &descriptor_table_def_2eproto_once,
      file_level_metadata_def_2eproto[6]);
}

// ===================================================================

class Sign::_Internal {
 public:
};

Sign::Sign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:owlchat.Sign)
}
Sign::Sign(const Sign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:owlchat.Sign)
}

inline void Sign::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Sign::~Sign() {
  // @@protoc_insertion_point(destructor:owlchat.Sign)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Sign::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Sign::ArenaDtor(void* object) {
  Sign* _this = reinterpret_cast< Sign* >(object);
  (void)_this;
}
void Sign::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Sign::Clear() {
// @@protoc_insertion_point(message_clear_start:owlchat.Sign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Sign::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:owlchat.Sign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes msg = 1;
  if (!this->_internal_msg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:owlchat.Sign)
  return target;
}

size_t Sign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:owlchat.Sign)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sign::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Sign::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sign::GetClassData() const { return &_class_data_; }

void Sign::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Sign *>(to)->MergeFrom(
      static_cast<const Sign &>(from));
}


void Sign::MergeFrom(const Sign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:owlchat.Sign)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sign::CopyFrom(const Sign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:owlchat.Sign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sign::IsInitialized() const {
  return true;
}

void Sign::InternalSwap(Sign* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Sign::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_def_2eproto_getter, &descriptor_table_def_2eproto_once,
      file_level_metadata_def_2eproto[7]);
}

// ===================================================================

class Verify::_Internal {
 public:
};

Verify::Verify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:owlchat.Verify)
}
Verify::Verify(const Verify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_public_key().empty()) {
    public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_public_key(), 
      GetArenaForAllocation());
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sig().empty()) {
    sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sig(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:owlchat.Verify)
}

inline void Verify::SharedCtor() {
public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sig_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Verify::~Verify() {
  // @@protoc_insertion_point(destructor:owlchat.Verify)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Verify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sig_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Verify::ArenaDtor(void* object) {
  Verify* _this = reinterpret_cast< Verify* >(object);
  (void)_this;
}
void Verify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Verify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Verify::Clear() {
// @@protoc_insertion_point(message_clear_start:owlchat.Verify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_key_.ClearToEmpty();
  msg_.ClearToEmpty();
  sig_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Verify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sig = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sig();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Verify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:owlchat.Verify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (!this->_internal_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_public_key(), target);
  }

  // bytes msg = 2;
  if (!this->_internal_msg().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // bytes sig = 3;
  if (!this->_internal_sig().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_sig(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:owlchat.Verify)
  return target;
}

size_t Verify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:owlchat.Verify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes public_key = 1;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_public_key());
  }

  // bytes msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // bytes sig = 3;
  if (!this->_internal_sig().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sig());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Verify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Verify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Verify::GetClassData() const { return &_class_data_; }

void Verify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Verify *>(to)->MergeFrom(
      static_cast<const Verify &>(from));
}


void Verify::MergeFrom(const Verify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:owlchat.Verify)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_public_key().empty()) {
    _internal_set_public_key(from._internal_public_key());
  }
  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_sig().empty()) {
    _internal_set_sig(from._internal_sig());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Verify::CopyFrom(const Verify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:owlchat.Verify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Verify::IsInitialized() const {
  return true;
}

void Verify::InternalSwap(Verify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &public_key_, GetArenaForAllocation(),
      &other->public_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sig_, GetArenaForAllocation(),
      &other->sig_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Verify::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_def_2eproto_getter, &descriptor_table_def_2eproto_once,
      file_level_metadata_def_2eproto[8]);
}

// ===================================================================

class DiffieHellmanKeyExchange::_Internal {
 public:
};

DiffieHellmanKeyExchange::DiffieHellmanKeyExchange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:owlchat.DiffieHellmanKeyExchange)
}
DiffieHellmanKeyExchange::DiffieHellmanKeyExchange(const DiffieHellmanKeyExchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  their_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_their_public_key().empty()) {
    their_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_their_public_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:owlchat.DiffieHellmanKeyExchange)
}

inline void DiffieHellmanKeyExchange::SharedCtor() {
their_public_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DiffieHellmanKeyExchange::~DiffieHellmanKeyExchange() {
  // @@protoc_insertion_point(destructor:owlchat.DiffieHellmanKeyExchange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DiffieHellmanKeyExchange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  their_public_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DiffieHellmanKeyExchange::ArenaDtor(void* object) {
  DiffieHellmanKeyExchange* _this = reinterpret_cast< DiffieHellmanKeyExchange* >(object);
  (void)_this;
}
void DiffieHellmanKeyExchange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiffieHellmanKeyExchange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiffieHellmanKeyExchange::Clear() {
// @@protoc_insertion_point(message_clear_start:owlchat.DiffieHellmanKeyExchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  their_public_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiffieHellmanKeyExchange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes their_public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_their_public_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiffieHellmanKeyExchange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:owlchat.DiffieHellmanKeyExchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes their_public_key = 1;
  if (!this->_internal_their_public_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_their_public_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:owlchat.DiffieHellmanKeyExchange)
  return target;
}

size_t DiffieHellmanKeyExchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:owlchat.DiffieHellmanKeyExchange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes their_public_key = 1;
  if (!this->_internal_their_public_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_their_public_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiffieHellmanKeyExchange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DiffieHellmanKeyExchange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiffieHellmanKeyExchange::GetClassData() const { return &_class_data_; }

void DiffieHellmanKeyExchange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DiffieHellmanKeyExchange *>(to)->MergeFrom(
      static_cast<const DiffieHellmanKeyExchange &>(from));
}


void DiffieHellmanKeyExchange::MergeFrom(const DiffieHellmanKeyExchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:owlchat.DiffieHellmanKeyExchange)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_their_public_key().empty()) {
    _internal_set_their_public_key(from._internal_their_public_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiffieHellmanKeyExchange::CopyFrom(const DiffieHellmanKeyExchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:owlchat.DiffieHellmanKeyExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiffieHellmanKeyExchange::IsInitialized() const {
  return true;
}

void DiffieHellmanKeyExchange::InternalSwap(DiffieHellmanKeyExchange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &their_public_key_, GetArenaForAllocation(),
      &other->their_public_key_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DiffieHellmanKeyExchange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_def_2eproto_getter, &descriptor_table_def_2eproto_once,
      file_level_metadata_def_2eproto[9]);
}

// ===================================================================

class Request::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Empty& generate_key_pair(const Request* msg);
  static const ::owlchat::InitKeyPair& init_key_pair(const Request* msg);
  static const ::owlchat::RestoreKeyPair& restore_key_pair(const Request* msg);
  static const ::owlchat::BackupKeyPair& backup_key_pair(const Request* msg);
  static const ::owlchat::ValidateMnemonic& validate_mnemonic(const Request* msg);
  static const ::owlchat::Encrypt& encrypt(const Request* msg);
  static const ::owlchat::Decrypt& decrypt(const Request* msg);
  static const ::owlchat::Sign& sign(const Request* msg);
  static const ::owlchat::Verify& verify(const Request* msg);
  static const ::owlchat::DiffieHellmanKeyExchange& diffie_hellman_key_exchange(const Request* msg);
};

const PROTOBUF_NAMESPACE_ID::Empty&
Request::_Internal::generate_key_pair(const Request* msg) {
  return *msg->body_.generate_key_pair_;
}
const ::owlchat::InitKeyPair&
Request::_Internal::init_key_pair(const Request* msg) {
  return *msg->body_.init_key_pair_;
}
const ::owlchat::RestoreKeyPair&
Request::_Internal::restore_key_pair(const Request* msg) {
  return *msg->body_.restore_key_pair_;
}
const ::owlchat::BackupKeyPair&
Request::_Internal::backup_key_pair(const Request* msg) {
  return *msg->body_.backup_key_pair_;
}
const ::owlchat::ValidateMnemonic&
Request::_Internal::validate_mnemonic(const Request* msg) {
  return *msg->body_.validate_mnemonic_;
}
const ::owlchat::Encrypt&
Request::_Internal::encrypt(const Request* msg) {
  return *msg->body_.encrypt_;
}
const ::owlchat::Decrypt&
Request::_Internal::decrypt(const Request* msg) {
  return *msg->body_.decrypt_;
}
const ::owlchat::Sign&
Request::_Internal::sign(const Request* msg) {
  return *msg->body_.sign_;
}
const ::owlchat::Verify&
Request::_Internal::verify(const Request* msg) {
  return *msg->body_.verify_;
}
const ::owlchat::DiffieHellmanKeyExchange&
Request::_Internal::diffie_hellman_key_exchange(const Request* msg) {
  return *msg->body_.diffie_hellman_key_exchange_;
}
void Request::set_allocated_generate_key_pair(PROTOBUF_NAMESPACE_ID::Empty* generate_key_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (generate_key_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(generate_key_pair));
    if (message_arena != submessage_arena) {
      generate_key_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generate_key_pair, submessage_arena);
    }
    set_has_generate_key_pair();
    body_.generate_key_pair_ = generate_key_pair;
  }
  // @@protoc_insertion_point(field_set_allocated:owlchat.Request.generate_key_pair)
}
void Request::clear_generate_key_pair() {
  if (_internal_has_generate_key_pair()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.generate_key_pair_;
    }
    clear_has_body();
  }
}
void Request::set_allocated_init_key_pair(::owlchat::InitKeyPair* init_key_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (init_key_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::owlchat::InitKeyPair>::GetOwningArena(init_key_pair);
    if (message_arena != submessage_arena) {
      init_key_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init_key_pair, submessage_arena);
    }
    set_has_init_key_pair();
    body_.init_key_pair_ = init_key_pair;
  }
  // @@protoc_insertion_point(field_set_allocated:owlchat.Request.init_key_pair)
}
void Request::set_allocated_restore_key_pair(::owlchat::RestoreKeyPair* restore_key_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (restore_key_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::owlchat::RestoreKeyPair>::GetOwningArena(restore_key_pair);
    if (message_arena != submessage_arena) {
      restore_key_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, restore_key_pair, submessage_arena);
    }
    set_has_restore_key_pair();
    body_.restore_key_pair_ = restore_key_pair;
  }
  // @@protoc_insertion_point(field_set_allocated:owlchat.Request.restore_key_pair)
}
void Request::set_allocated_backup_key_pair(::owlchat::BackupKeyPair* backup_key_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (backup_key_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::owlchat::BackupKeyPair>::GetOwningArena(backup_key_pair);
    if (message_arena != submessage_arena) {
      backup_key_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, backup_key_pair, submessage_arena);
    }
    set_has_backup_key_pair();
    body_.backup_key_pair_ = backup_key_pair;
  }
  // @@protoc_insertion_point(field_set_allocated:owlchat.Request.backup_key_pair)
}
void Request::set_allocated_validate_mnemonic(::owlchat::ValidateMnemonic* validate_mnemonic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (validate_mnemonic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::owlchat::ValidateMnemonic>::GetOwningArena(validate_mnemonic);
    if (message_arena != submessage_arena) {
      validate_mnemonic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validate_mnemonic, submessage_arena);
    }
    set_has_validate_mnemonic();
    body_.validate_mnemonic_ = validate_mnemonic;
  }
  // @@protoc_insertion_point(field_set_allocated:owlchat.Request.validate_mnemonic)
}
void Request::set_allocated_encrypt(::owlchat::Encrypt* encrypt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (encrypt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::owlchat::Encrypt>::GetOwningArena(encrypt);
    if (message_arena != submessage_arena) {
      encrypt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encrypt, submessage_arena);
    }
    set_has_encrypt();
    body_.encrypt_ = encrypt;
  }
  // @@protoc_insertion_point(field_set_allocated:owlchat.Request.encrypt)
}
void Request::set_allocated_decrypt(::owlchat::Decrypt* decrypt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (decrypt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::owlchat::Decrypt>::GetOwningArena(decrypt);
    if (message_arena != submessage_arena) {
      decrypt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, decrypt, submessage_arena);
    }
    set_has_decrypt();
    body_.decrypt_ = decrypt;
  }
  // @@protoc_insertion_point(field_set_allocated:owlchat.Request.decrypt)
}
void Request::set_allocated_sign(::owlchat::Sign* sign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (sign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::owlchat::Sign>::GetOwningArena(sign);
    if (message_arena != submessage_arena) {
      sign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sign, submessage_arena);
    }
    set_has_sign();
    body_.sign_ = sign;
  }
  // @@protoc_insertion_point(field_set_allocated:owlchat.Request.sign)
}
void Request::set_allocated_verify(::owlchat::Verify* verify) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (verify) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::owlchat::Verify>::GetOwningArena(verify);
    if (message_arena != submessage_arena) {
      verify = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verify, submessage_arena);
    }
    set_has_verify();
    body_.verify_ = verify;
  }
  // @@protoc_insertion_point(field_set_allocated:owlchat.Request.verify)
}
void Request::set_allocated_diffie_hellman_key_exchange(::owlchat::DiffieHellmanKeyExchange* diffie_hellman_key_exchange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (diffie_hellman_key_exchange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::owlchat::DiffieHellmanKeyExchange>::GetOwningArena(diffie_hellman_key_exchange);
    if (message_arena != submessage_arena) {
      diffie_hellman_key_exchange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diffie_hellman_key_exchange, submessage_arena);
    }
    set_has_diffie_hellman_key_exchange();
    body_.diffie_hellman_key_exchange_ = diffie_hellman_key_exchange;
  }
  // @@protoc_insertion_point(field_set_allocated:owlchat.Request.diffie_hellman_key_exchange)
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:owlchat.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_body();
  switch (from.body_case()) {
    case kGenerateKeyPair: {
      _internal_mutable_generate_key_pair()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_generate_key_pair());
      break;
    }
    case kInitKeyPair: {
      _internal_mutable_init_key_pair()->::owlchat::InitKeyPair::MergeFrom(from._internal_init_key_pair());
      break;
    }
    case kRestoreKeyPair: {
      _internal_mutable_restore_key_pair()->::owlchat::RestoreKeyPair::MergeFrom(from._internal_restore_key_pair());
      break;
    }
    case kBackupKeyPair: {
      _internal_mutable_backup_key_pair()->::owlchat::BackupKeyPair::MergeFrom(from._internal_backup_key_pair());
      break;
    }
    case kValidateMnemonic: {
      _internal_mutable_validate_mnemonic()->::owlchat::ValidateMnemonic::MergeFrom(from._internal_validate_mnemonic());
      break;
    }
    case kEncrypt: {
      _internal_mutable_encrypt()->::owlchat::Encrypt::MergeFrom(from._internal_encrypt());
      break;
    }
    case kDecrypt: {
      _internal_mutable_decrypt()->::owlchat::Decrypt::MergeFrom(from._internal_decrypt());
      break;
    }
    case kSign: {
      _internal_mutable_sign()->::owlchat::Sign::MergeFrom(from._internal_sign());
      break;
    }
    case kVerify: {
      _internal_mutable_verify()->::owlchat::Verify::MergeFrom(from._internal_verify());
      break;
    }
    case kDiffieHellmanKeyExchange: {
      _internal_mutable_diffie_hellman_key_exchange()->::owlchat::DiffieHellmanKeyExchange::MergeFrom(from._internal_diffie_hellman_key_exchange());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:owlchat.Request)
}

inline void Request::SharedCtor() {
clear_has_body();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:owlchat.Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_body()) {
    clear_body();
  }
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Request::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:owlchat.Request)
  switch (body_case()) {
    case kGenerateKeyPair: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.generate_key_pair_;
      }
      break;
    }
    case kInitKeyPair: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.init_key_pair_;
      }
      break;
    }
    case kRestoreKeyPair: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.restore_key_pair_;
      }
      break;
    }
    case kBackupKeyPair: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.backup_key_pair_;
      }
      break;
    }
    case kValidateMnemonic: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.validate_mnemonic_;
      }
      break;
    }
    case kEncrypt: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.encrypt_;
      }
      break;
    }
    case kDecrypt: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.decrypt_;
      }
      break;
    }
    case kSign: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.sign_;
      }
      break;
    }
    case kVerify: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.verify_;
      }
      break;
    }
    case kDiffieHellmanKeyExchange: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.diffie_hellman_key_exchange_;
      }
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:owlchat.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_body();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Empty generate_key_pair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_generate_key_pair(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .owlchat.InitKeyPair init_key_pair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_init_key_pair(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .owlchat.RestoreKeyPair restore_key_pair = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_restore_key_pair(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .owlchat.BackupKeyPair backup_key_pair = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_backup_key_pair(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .owlchat.ValidateMnemonic validate_mnemonic = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_validate_mnemonic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .owlchat.Encrypt encrypt = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_encrypt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .owlchat.Decrypt decrypt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_decrypt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .owlchat.Sign sign = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .owlchat.Verify verify = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_verify(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .owlchat.DiffieHellmanKeyExchange diffie_hellman_key_exchange = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_diffie_hellman_key_exchange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:owlchat.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Empty generate_key_pair = 1;
  if (_internal_has_generate_key_pair()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::generate_key_pair(this), target, stream);
  }

  // .owlchat.InitKeyPair init_key_pair = 2;
  if (_internal_has_init_key_pair()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::init_key_pair(this), target, stream);
  }

  // .owlchat.RestoreKeyPair restore_key_pair = 3;
  if (_internal_has_restore_key_pair()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::restore_key_pair(this), target, stream);
  }

  // .owlchat.BackupKeyPair backup_key_pair = 4;
  if (_internal_has_backup_key_pair()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::backup_key_pair(this), target, stream);
  }

  // .owlchat.ValidateMnemonic validate_mnemonic = 5;
  if (_internal_has_validate_mnemonic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::validate_mnemonic(this), target, stream);
  }

  // .owlchat.Encrypt encrypt = 6;
  if (_internal_has_encrypt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::encrypt(this), target, stream);
  }

  // .owlchat.Decrypt decrypt = 7;
  if (_internal_has_decrypt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::decrypt(this), target, stream);
  }

  // .owlchat.Sign sign = 8;
  if (_internal_has_sign()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::sign(this), target, stream);
  }

  // .owlchat.Verify verify = 9;
  if (_internal_has_verify()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::verify(this), target, stream);
  }

  // .owlchat.DiffieHellmanKeyExchange diffie_hellman_key_exchange = 10;
  if (_internal_has_diffie_hellman_key_exchange()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::diffie_hellman_key_exchange(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:owlchat.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:owlchat.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (body_case()) {
    // .google.protobuf.Empty generate_key_pair = 1;
    case kGenerateKeyPair: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.generate_key_pair_);
      break;
    }
    // .owlchat.InitKeyPair init_key_pair = 2;
    case kInitKeyPair: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.init_key_pair_);
      break;
    }
    // .owlchat.RestoreKeyPair restore_key_pair = 3;
    case kRestoreKeyPair: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.restore_key_pair_);
      break;
    }
    // .owlchat.BackupKeyPair backup_key_pair = 4;
    case kBackupKeyPair: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.backup_key_pair_);
      break;
    }
    // .owlchat.ValidateMnemonic validate_mnemonic = 5;
    case kValidateMnemonic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.validate_mnemonic_);
      break;
    }
    // .owlchat.Encrypt encrypt = 6;
    case kEncrypt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.encrypt_);
      break;
    }
    // .owlchat.Decrypt decrypt = 7;
    case kDecrypt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.decrypt_);
      break;
    }
    // .owlchat.Sign sign = 8;
    case kSign: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.sign_);
      break;
    }
    // .owlchat.Verify verify = 9;
    case kVerify: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.verify_);
      break;
    }
    // .owlchat.DiffieHellmanKeyExchange diffie_hellman_key_exchange = 10;
    case kDiffieHellmanKeyExchange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.diffie_hellman_key_exchange_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }

void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Request *>(to)->MergeFrom(
      static_cast<const Request &>(from));
}


void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:owlchat.Request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.body_case()) {
    case kGenerateKeyPair: {
      _internal_mutable_generate_key_pair()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_generate_key_pair());
      break;
    }
    case kInitKeyPair: {
      _internal_mutable_init_key_pair()->::owlchat::InitKeyPair::MergeFrom(from._internal_init_key_pair());
      break;
    }
    case kRestoreKeyPair: {
      _internal_mutable_restore_key_pair()->::owlchat::RestoreKeyPair::MergeFrom(from._internal_restore_key_pair());
      break;
    }
    case kBackupKeyPair: {
      _internal_mutable_backup_key_pair()->::owlchat::BackupKeyPair::MergeFrom(from._internal_backup_key_pair());
      break;
    }
    case kValidateMnemonic: {
      _internal_mutable_validate_mnemonic()->::owlchat::ValidateMnemonic::MergeFrom(from._internal_validate_mnemonic());
      break;
    }
    case kEncrypt: {
      _internal_mutable_encrypt()->::owlchat::Encrypt::MergeFrom(from._internal_encrypt());
      break;
    }
    case kDecrypt: {
      _internal_mutable_decrypt()->::owlchat::Decrypt::MergeFrom(from._internal_decrypt());
      break;
    }
    case kSign: {
      _internal_mutable_sign()->::owlchat::Sign::MergeFrom(from._internal_sign());
      break;
    }
    case kVerify: {
      _internal_mutable_verify()->::owlchat::Verify::MergeFrom(from._internal_verify());
      break;
    }
    case kDiffieHellmanKeyExchange: {
      _internal_mutable_diffie_hellman_key_exchange()->::owlchat::DiffieHellmanKeyExchange::MergeFrom(from._internal_diffie_hellman_key_exchange());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:owlchat.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(body_, other->body_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_def_2eproto_getter, &descriptor_table_def_2eproto_once,
      file_level_metadata_def_2eproto[10]);
}

// ===================================================================

class Response::_Internal {
 public:
  static const ::owlchat::KeyPair& key_pair(const Response* msg);
};

const ::owlchat::KeyPair&
Response::_Internal::key_pair(const Response* msg) {
  return *msg->body_.key_pair_;
}
void Response::set_allocated_key_pair(::owlchat::KeyPair* key_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_body();
  if (key_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::owlchat::KeyPair>::GetOwningArena(key_pair);
    if (message_arena != submessage_arena) {
      key_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_pair, submessage_arena);
    }
    set_has_key_pair();
    body_.key_pair_ = key_pair;
  }
  // @@protoc_insertion_point(field_set_allocated:owlchat.Response.key_pair)
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:owlchat.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_body();
  switch (from.body_case()) {
    case kError: {
      _internal_set_error(from._internal_error());
      break;
    }
    case kKeyPair: {
      _internal_mutable_key_pair()->::owlchat::KeyPair::MergeFrom(from._internal_key_pair());
      break;
    }
    case kMnemonic: {
      _internal_set_mnemonic(from._internal_mnemonic());
      break;
    }
    case kValidMnemonic: {
      _internal_set_valid_mnemonic(from._internal_valid_mnemonic());
      break;
    }
    case kEncryptedMessage: {
      _internal_set_encrypted_message(from._internal_encrypted_message());
      break;
    }
    case kDecryptedMessage: {
      _internal_set_decrypted_message(from._internal_decrypted_message());
      break;
    }
    case kSignature: {
      _internal_set_signature(from._internal_signature());
      break;
    }
    case kValidSignature: {
      _internal_set_valid_signature(from._internal_valid_signature());
      break;
    }
    case kSharedSecret: {
      _internal_set_shared_secret(from._internal_shared_secret());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:owlchat.Response)
}

inline void Response::SharedCtor() {
clear_has_body();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:owlchat.Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_body()) {
    clear_body();
  }
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Response::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:owlchat.Response)
  switch (body_case()) {
    case kError: {
      // No need to clear
      break;
    }
    case kKeyPair: {
      if (GetArenaForAllocation() == nullptr) {
        delete body_.key_pair_;
      }
      break;
    }
    case kMnemonic: {
      body_.mnemonic_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kValidMnemonic: {
      // No need to clear
      break;
    }
    case kEncryptedMessage: {
      body_.encrypted_message_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kDecryptedMessage: {
      body_.decrypted_message_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kSignature: {
      body_.signature_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kValidSignature: {
      // No need to clear
      break;
    }
    case kSharedSecret: {
      body_.shared_secret_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:owlchat.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_body();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .owlchat.Response.Error error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_error(static_cast<::owlchat::Response_Error>(val));
        } else goto handle_unusual;
        continue;
      // .owlchat.KeyPair key_pair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_pair(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mnemonic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_mnemonic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "owlchat.Response.mnemonic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool valid_mnemonic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_valid_mnemonic(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes encrypted_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_encrypted_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes decrypted_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_decrypted_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool valid_signature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _internal_set_valid_signature(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes shared_secret = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_shared_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:owlchat.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .owlchat.Response.Error error = 1;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_error(), target);
  }

  // .owlchat.KeyPair key_pair = 2;
  if (_internal_has_key_pair()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key_pair(this), target, stream);
  }

  // string mnemonic = 3;
  if (_internal_has_mnemonic()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mnemonic().data(), static_cast<int>(this->_internal_mnemonic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "owlchat.Response.mnemonic");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_mnemonic(), target);
  }

  // bool valid_mnemonic = 4;
  if (_internal_has_valid_mnemonic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_valid_mnemonic(), target);
  }

  // bytes encrypted_message = 5;
  if (_internal_has_encrypted_message()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_encrypted_message(), target);
  }

  // bytes decrypted_message = 6;
  if (_internal_has_decrypted_message()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_decrypted_message(), target);
  }

  // bytes signature = 7;
  if (_internal_has_signature()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_signature(), target);
  }

  // bool valid_signature = 8;
  if (_internal_has_valid_signature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_valid_signature(), target);
  }

  // bytes shared_secret = 9;
  if (_internal_has_shared_secret()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_shared_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:owlchat.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:owlchat.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (body_case()) {
    // .owlchat.Response.Error error = 1;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error());
      break;
    }
    // .owlchat.KeyPair key_pair = 2;
    case kKeyPair: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.key_pair_);
      break;
    }
    // string mnemonic = 3;
    case kMnemonic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mnemonic());
      break;
    }
    // bool valid_mnemonic = 4;
    case kValidMnemonic: {
      total_size += 1 + 1;
      break;
    }
    // bytes encrypted_message = 5;
    case kEncryptedMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_encrypted_message());
      break;
    }
    // bytes decrypted_message = 6;
    case kDecryptedMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_decrypted_message());
      break;
    }
    // bytes signature = 7;
    case kSignature: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
      break;
    }
    // bool valid_signature = 8;
    case kValidSignature: {
      total_size += 1 + 1;
      break;
    }
    // bytes shared_secret = 9;
    case kSharedSecret: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_shared_secret());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }

void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Response *>(to)->MergeFrom(
      static_cast<const Response &>(from));
}


void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:owlchat.Response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.body_case()) {
    case kError: {
      _internal_set_error(from._internal_error());
      break;
    }
    case kKeyPair: {
      _internal_mutable_key_pair()->::owlchat::KeyPair::MergeFrom(from._internal_key_pair());
      break;
    }
    case kMnemonic: {
      _internal_set_mnemonic(from._internal_mnemonic());
      break;
    }
    case kValidMnemonic: {
      _internal_set_valid_mnemonic(from._internal_valid_mnemonic());
      break;
    }
    case kEncryptedMessage: {
      _internal_set_encrypted_message(from._internal_encrypted_message());
      break;
    }
    case kDecryptedMessage: {
      _internal_set_decrypted_message(from._internal_decrypted_message());
      break;
    }
    case kSignature: {
      _internal_set_signature(from._internal_signature());
      break;
    }
    case kValidSignature: {
      _internal_set_valid_signature(from._internal_valid_signature());
      break;
    }
    case kSharedSecret: {
      _internal_set_shared_secret(from._internal_shared_secret());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:owlchat.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(body_, other->body_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_def_2eproto_getter, &descriptor_table_def_2eproto_once,
      file_level_metadata_def_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace owlchat
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::owlchat::KeyPair* Arena::CreateMaybeMessage< ::owlchat::KeyPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::owlchat::KeyPair >(arena);
}
template<> PROTOBUF_NOINLINE ::owlchat::InitKeyPair* Arena::CreateMaybeMessage< ::owlchat::InitKeyPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::owlchat::InitKeyPair >(arena);
}
template<> PROTOBUF_NOINLINE ::owlchat::RestoreKeyPair* Arena::CreateMaybeMessage< ::owlchat::RestoreKeyPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::owlchat::RestoreKeyPair >(arena);
}
template<> PROTOBUF_NOINLINE ::owlchat::BackupKeyPair* Arena::CreateMaybeMessage< ::owlchat::BackupKeyPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::owlchat::BackupKeyPair >(arena);
}
template<> PROTOBUF_NOINLINE ::owlchat::ValidateMnemonic* Arena::CreateMaybeMessage< ::owlchat::ValidateMnemonic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::owlchat::ValidateMnemonic >(arena);
}
template<> PROTOBUF_NOINLINE ::owlchat::Encrypt* Arena::CreateMaybeMessage< ::owlchat::Encrypt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::owlchat::Encrypt >(arena);
}
template<> PROTOBUF_NOINLINE ::owlchat::Decrypt* Arena::CreateMaybeMessage< ::owlchat::Decrypt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::owlchat::Decrypt >(arena);
}
template<> PROTOBUF_NOINLINE ::owlchat::Sign* Arena::CreateMaybeMessage< ::owlchat::Sign >(Arena* arena) {
  return Arena::CreateMessageInternal< ::owlchat::Sign >(arena);
}
template<> PROTOBUF_NOINLINE ::owlchat::Verify* Arena::CreateMaybeMessage< ::owlchat::Verify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::owlchat::Verify >(arena);
}
template<> PROTOBUF_NOINLINE ::owlchat::DiffieHellmanKeyExchange* Arena::CreateMaybeMessage< ::owlchat::DiffieHellmanKeyExchange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::owlchat::DiffieHellmanKeyExchange >(arena);
}
template<> PROTOBUF_NOINLINE ::owlchat::Request* Arena::CreateMaybeMessage< ::owlchat::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::owlchat::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::owlchat::Response* Arena::CreateMaybeMessage< ::owlchat::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::owlchat::Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
