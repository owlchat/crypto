// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: def.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_def_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_def_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_def_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_def_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_def_2eproto;
namespace owlchat {
class BackupKeyPair;
struct BackupKeyPairDefaultTypeInternal;
extern BackupKeyPairDefaultTypeInternal _BackupKeyPair_default_instance_;
class Decrypt;
struct DecryptDefaultTypeInternal;
extern DecryptDefaultTypeInternal _Decrypt_default_instance_;
class DiffieHellmanKeyExchange;
struct DiffieHellmanKeyExchangeDefaultTypeInternal;
extern DiffieHellmanKeyExchangeDefaultTypeInternal _DiffieHellmanKeyExchange_default_instance_;
class Encrypt;
struct EncryptDefaultTypeInternal;
extern EncryptDefaultTypeInternal _Encrypt_default_instance_;
class InitKeyPair;
struct InitKeyPairDefaultTypeInternal;
extern InitKeyPairDefaultTypeInternal _InitKeyPair_default_instance_;
class KeyPair;
struct KeyPairDefaultTypeInternal;
extern KeyPairDefaultTypeInternal _KeyPair_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class RestoreKeyPair;
struct RestoreKeyPairDefaultTypeInternal;
extern RestoreKeyPairDefaultTypeInternal _RestoreKeyPair_default_instance_;
class Sign;
struct SignDefaultTypeInternal;
extern SignDefaultTypeInternal _Sign_default_instance_;
class ValidateMnemonic;
struct ValidateMnemonicDefaultTypeInternal;
extern ValidateMnemonicDefaultTypeInternal _ValidateMnemonic_default_instance_;
class Verify;
struct VerifyDefaultTypeInternal;
extern VerifyDefaultTypeInternal _Verify_default_instance_;
}  // namespace owlchat
PROTOBUF_NAMESPACE_OPEN
template<> ::owlchat::BackupKeyPair* Arena::CreateMaybeMessage<::owlchat::BackupKeyPair>(Arena*);
template<> ::owlchat::Decrypt* Arena::CreateMaybeMessage<::owlchat::Decrypt>(Arena*);
template<> ::owlchat::DiffieHellmanKeyExchange* Arena::CreateMaybeMessage<::owlchat::DiffieHellmanKeyExchange>(Arena*);
template<> ::owlchat::Encrypt* Arena::CreateMaybeMessage<::owlchat::Encrypt>(Arena*);
template<> ::owlchat::InitKeyPair* Arena::CreateMaybeMessage<::owlchat::InitKeyPair>(Arena*);
template<> ::owlchat::KeyPair* Arena::CreateMaybeMessage<::owlchat::KeyPair>(Arena*);
template<> ::owlchat::Request* Arena::CreateMaybeMessage<::owlchat::Request>(Arena*);
template<> ::owlchat::Response* Arena::CreateMaybeMessage<::owlchat::Response>(Arena*);
template<> ::owlchat::RestoreKeyPair* Arena::CreateMaybeMessage<::owlchat::RestoreKeyPair>(Arena*);
template<> ::owlchat::Sign* Arena::CreateMaybeMessage<::owlchat::Sign>(Arena*);
template<> ::owlchat::ValidateMnemonic* Arena::CreateMaybeMessage<::owlchat::ValidateMnemonic>(Arena*);
template<> ::owlchat::Verify* Arena::CreateMaybeMessage<::owlchat::Verify>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace owlchat {

enum Response_Error : int {
  Response_Error_UNKNOWN = 0,
  Response_Error_MISSING_REQUEST_BODY = 1,
  Response_Error_INVALID_PUBLIC_KEY = 2,
  Response_Error_INVALID_SECRET_KEY = 3,
  Response_Error_INVALID_SIGNATURE = 4,
  Response_Error_INVALID_SEED = 5,
  Response_Error_INVALID_PAPER_KEY = 6,
  Response_Error_NOT_INITIALIZED = 7,
  Response_Error_Response_Error_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Response_Error_Response_Error_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Response_Error_IsValid(int value);
constexpr Response_Error Response_Error_Error_MIN = Response_Error_UNKNOWN;
constexpr Response_Error Response_Error_Error_MAX = Response_Error_NOT_INITIALIZED;
constexpr int Response_Error_Error_ARRAYSIZE = Response_Error_Error_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Response_Error_descriptor();
template<typename T>
inline const std::string& Response_Error_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Response_Error>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Response_Error_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Response_Error_descriptor(), enum_t_value);
}
inline bool Response_Error_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Response_Error* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Response_Error>(
    Response_Error_descriptor(), name, value);
}
// ===================================================================

class KeyPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:owlchat.KeyPair) */ {
 public:
  inline KeyPair() : KeyPair(nullptr) {}
  ~KeyPair() override;
  explicit constexpr KeyPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyPair(const KeyPair& from);
  KeyPair(KeyPair&& from) noexcept
    : KeyPair() {
    *this = ::std::move(from);
  }

  inline KeyPair& operator=(const KeyPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyPair& operator=(KeyPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyPair* internal_default_instance() {
    return reinterpret_cast<const KeyPair*>(
               &_KeyPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyPair& a, KeyPair& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyPair* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyPair* New() const final {
    return new KeyPair();
  }

  KeyPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KeyPair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "owlchat.KeyPair";
  }
  protected:
  explicit KeyPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kSecretKeyFieldNumber = 2,
    kSeedFieldNumber = 3,
  };
  // bytes public_key = 1;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // bytes secret_key = 2;
  void clear_secret_key();
  const std::string& secret_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secret_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secret_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_secret_key();
  void set_allocated_secret_key(std::string* secret_key);
  private:
  const std::string& _internal_secret_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret_key(const std::string& value);
  std::string* _internal_mutable_secret_key();
  public:

  // bytes seed = 3;
  void clear_seed();
  const std::string& seed() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_seed(ArgT0&& arg0, ArgT... args);
  std::string* mutable_seed();
  PROTOBUF_MUST_USE_RESULT std::string* release_seed();
  void set_allocated_seed(std::string* seed);
  private:
  const std::string& _internal_seed() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_seed(const std::string& value);
  std::string* _internal_mutable_seed();
  public:

  // @@protoc_insertion_point(class_scope:owlchat.KeyPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_def_2eproto;
};
// -------------------------------------------------------------------

class InitKeyPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:owlchat.InitKeyPair) */ {
 public:
  inline InitKeyPair() : InitKeyPair(nullptr) {}
  ~InitKeyPair() override;
  explicit constexpr InitKeyPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitKeyPair(const InitKeyPair& from);
  InitKeyPair(InitKeyPair&& from) noexcept
    : InitKeyPair() {
    *this = ::std::move(from);
  }

  inline InitKeyPair& operator=(const InitKeyPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitKeyPair& operator=(InitKeyPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InitKeyPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitKeyPair* internal_default_instance() {
    return reinterpret_cast<const InitKeyPair*>(
               &_InitKeyPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InitKeyPair& a, InitKeyPair& b) {
    a.Swap(&b);
  }
  inline void Swap(InitKeyPair* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitKeyPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitKeyPair* New() const final {
    return new InitKeyPair();
  }

  InitKeyPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitKeyPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InitKeyPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InitKeyPair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitKeyPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "owlchat.InitKeyPair";
  }
  protected:
  explicit InitKeyPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecretKeyFieldNumber = 1,
  };
  // bytes secret_key = 1;
  void clear_secret_key();
  const std::string& secret_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secret_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secret_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_secret_key();
  void set_allocated_secret_key(std::string* secret_key);
  private:
  const std::string& _internal_secret_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret_key(const std::string& value);
  std::string* _internal_mutable_secret_key();
  public:

  // @@protoc_insertion_point(class_scope:owlchat.InitKeyPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_def_2eproto;
};
// -------------------------------------------------------------------

class RestoreKeyPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:owlchat.RestoreKeyPair) */ {
 public:
  inline RestoreKeyPair() : RestoreKeyPair(nullptr) {}
  ~RestoreKeyPair() override;
  explicit constexpr RestoreKeyPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RestoreKeyPair(const RestoreKeyPair& from);
  RestoreKeyPair(RestoreKeyPair&& from) noexcept
    : RestoreKeyPair() {
    *this = ::std::move(from);
  }

  inline RestoreKeyPair& operator=(const RestoreKeyPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestoreKeyPair& operator=(RestoreKeyPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RestoreKeyPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const RestoreKeyPair* internal_default_instance() {
    return reinterpret_cast<const RestoreKeyPair*>(
               &_RestoreKeyPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RestoreKeyPair& a, RestoreKeyPair& b) {
    a.Swap(&b);
  }
  inline void Swap(RestoreKeyPair* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RestoreKeyPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestoreKeyPair* New() const final {
    return new RestoreKeyPair();
  }

  RestoreKeyPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestoreKeyPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RestoreKeyPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RestoreKeyPair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreKeyPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "owlchat.RestoreKeyPair";
  }
  protected:
  explicit RestoreKeyPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaperKeyFieldNumber = 1,
  };
  // string paper_key = 1;
  void clear_paper_key();
  const std::string& paper_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_paper_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_paper_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_paper_key();
  void set_allocated_paper_key(std::string* paper_key);
  private:
  const std::string& _internal_paper_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_paper_key(const std::string& value);
  std::string* _internal_mutable_paper_key();
  public:

  // @@protoc_insertion_point(class_scope:owlchat.RestoreKeyPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paper_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_def_2eproto;
};
// -------------------------------------------------------------------

class BackupKeyPair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:owlchat.BackupKeyPair) */ {
 public:
  inline BackupKeyPair() : BackupKeyPair(nullptr) {}
  ~BackupKeyPair() override;
  explicit constexpr BackupKeyPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BackupKeyPair(const BackupKeyPair& from);
  BackupKeyPair(BackupKeyPair&& from) noexcept
    : BackupKeyPair() {
    *this = ::std::move(from);
  }

  inline BackupKeyPair& operator=(const BackupKeyPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackupKeyPair& operator=(BackupKeyPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BackupKeyPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const BackupKeyPair* internal_default_instance() {
    return reinterpret_cast<const BackupKeyPair*>(
               &_BackupKeyPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BackupKeyPair& a, BackupKeyPair& b) {
    a.Swap(&b);
  }
  inline void Swap(BackupKeyPair* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackupKeyPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackupKeyPair* New() const final {
    return new BackupKeyPair();
  }

  BackupKeyPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackupKeyPair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BackupKeyPair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BackupKeyPair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BackupKeyPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "owlchat.BackupKeyPair";
  }
  protected:
  explicit BackupKeyPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaybeSeedFieldNumber = 1,
  };
  // bytes maybe_seed = 1;
  void clear_maybe_seed();
  const std::string& maybe_seed() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_maybe_seed(ArgT0&& arg0, ArgT... args);
  std::string* mutable_maybe_seed();
  PROTOBUF_MUST_USE_RESULT std::string* release_maybe_seed();
  void set_allocated_maybe_seed(std::string* maybe_seed);
  private:
  const std::string& _internal_maybe_seed() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_maybe_seed(const std::string& value);
  std::string* _internal_mutable_maybe_seed();
  public:

  // @@protoc_insertion_point(class_scope:owlchat.BackupKeyPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maybe_seed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_def_2eproto;
};
// -------------------------------------------------------------------

class ValidateMnemonic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:owlchat.ValidateMnemonic) */ {
 public:
  inline ValidateMnemonic() : ValidateMnemonic(nullptr) {}
  ~ValidateMnemonic() override;
  explicit constexpr ValidateMnemonic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidateMnemonic(const ValidateMnemonic& from);
  ValidateMnemonic(ValidateMnemonic&& from) noexcept
    : ValidateMnemonic() {
    *this = ::std::move(from);
  }

  inline ValidateMnemonic& operator=(const ValidateMnemonic& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateMnemonic& operator=(ValidateMnemonic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidateMnemonic& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidateMnemonic* internal_default_instance() {
    return reinterpret_cast<const ValidateMnemonic*>(
               &_ValidateMnemonic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ValidateMnemonic& a, ValidateMnemonic& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateMnemonic* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateMnemonic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ValidateMnemonic* New() const final {
    return new ValidateMnemonic();
  }

  ValidateMnemonic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ValidateMnemonic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidateMnemonic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ValidateMnemonic& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateMnemonic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "owlchat.ValidateMnemonic";
  }
  protected:
  explicit ValidateMnemonic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhraseFieldNumber = 1,
  };
  // string phrase = 1;
  void clear_phrase();
  const std::string& phrase() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phrase(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phrase();
  PROTOBUF_MUST_USE_RESULT std::string* release_phrase();
  void set_allocated_phrase(std::string* phrase);
  private:
  const std::string& _internal_phrase() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phrase(const std::string& value);
  std::string* _internal_mutable_phrase();
  public:

  // @@protoc_insertion_point(class_scope:owlchat.ValidateMnemonic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phrase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_def_2eproto;
};
// -------------------------------------------------------------------

class Encrypt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:owlchat.Encrypt) */ {
 public:
  inline Encrypt() : Encrypt(nullptr) {}
  ~Encrypt() override;
  explicit constexpr Encrypt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Encrypt(const Encrypt& from);
  Encrypt(Encrypt&& from) noexcept
    : Encrypt() {
    *this = ::std::move(from);
  }

  inline Encrypt& operator=(const Encrypt& from) {
    CopyFrom(from);
    return *this;
  }
  inline Encrypt& operator=(Encrypt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Encrypt& default_instance() {
    return *internal_default_instance();
  }
  static inline const Encrypt* internal_default_instance() {
    return reinterpret_cast<const Encrypt*>(
               &_Encrypt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Encrypt& a, Encrypt& b) {
    a.Swap(&b);
  }
  inline void Swap(Encrypt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Encrypt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Encrypt* New() const final {
    return new Encrypt();
  }

  Encrypt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Encrypt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Encrypt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Encrypt& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Encrypt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "owlchat.Encrypt";
  }
  protected:
  explicit Encrypt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaintextFieldNumber = 1,
  };
  // bytes plaintext = 1;
  void clear_plaintext();
  const std::string& plaintext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plaintext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plaintext();
  PROTOBUF_MUST_USE_RESULT std::string* release_plaintext();
  void set_allocated_plaintext(std::string* plaintext);
  private:
  const std::string& _internal_plaintext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plaintext(const std::string& value);
  std::string* _internal_mutable_plaintext();
  public:

  // @@protoc_insertion_point(class_scope:owlchat.Encrypt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_def_2eproto;
};
// -------------------------------------------------------------------

class Decrypt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:owlchat.Decrypt) */ {
 public:
  inline Decrypt() : Decrypt(nullptr) {}
  ~Decrypt() override;
  explicit constexpr Decrypt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Decrypt(const Decrypt& from);
  Decrypt(Decrypt&& from) noexcept
    : Decrypt() {
    *this = ::std::move(from);
  }

  inline Decrypt& operator=(const Decrypt& from) {
    CopyFrom(from);
    return *this;
  }
  inline Decrypt& operator=(Decrypt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Decrypt& default_instance() {
    return *internal_default_instance();
  }
  static inline const Decrypt* internal_default_instance() {
    return reinterpret_cast<const Decrypt*>(
               &_Decrypt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Decrypt& a, Decrypt& b) {
    a.Swap(&b);
  }
  inline void Swap(Decrypt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Decrypt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Decrypt* New() const final {
    return new Decrypt();
  }

  Decrypt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Decrypt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Decrypt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Decrypt& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decrypt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "owlchat.Decrypt";
  }
  protected:
  explicit Decrypt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCiphertextFieldNumber = 1,
  };
  // bytes ciphertext = 1;
  void clear_ciphertext();
  const std::string& ciphertext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ciphertext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ciphertext();
  PROTOBUF_MUST_USE_RESULT std::string* release_ciphertext();
  void set_allocated_ciphertext(std::string* ciphertext);
  private:
  const std::string& _internal_ciphertext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ciphertext(const std::string& value);
  std::string* _internal_mutable_ciphertext();
  public:

  // @@protoc_insertion_point(class_scope:owlchat.Decrypt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ciphertext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_def_2eproto;
};
// -------------------------------------------------------------------

class Sign final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:owlchat.Sign) */ {
 public:
  inline Sign() : Sign(nullptr) {}
  ~Sign() override;
  explicit constexpr Sign(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sign(const Sign& from);
  Sign(Sign&& from) noexcept
    : Sign() {
    *this = ::std::move(from);
  }

  inline Sign& operator=(const Sign& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sign& operator=(Sign&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sign& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sign* internal_default_instance() {
    return reinterpret_cast<const Sign*>(
               &_Sign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Sign& a, Sign& b) {
    a.Swap(&b);
  }
  inline void Swap(Sign* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sign* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sign* New() const final {
    return new Sign();
  }

  Sign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sign>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sign& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Sign& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "owlchat.Sign";
  }
  protected:
  explicit Sign(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // bytes msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:owlchat.Sign)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_def_2eproto;
};
// -------------------------------------------------------------------

class Verify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:owlchat.Verify) */ {
 public:
  inline Verify() : Verify(nullptr) {}
  ~Verify() override;
  explicit constexpr Verify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Verify(const Verify& from);
  Verify(Verify&& from) noexcept
    : Verify() {
    *this = ::std::move(from);
  }

  inline Verify& operator=(const Verify& from) {
    CopyFrom(from);
    return *this;
  }
  inline Verify& operator=(Verify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Verify& default_instance() {
    return *internal_default_instance();
  }
  static inline const Verify* internal_default_instance() {
    return reinterpret_cast<const Verify*>(
               &_Verify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Verify& a, Verify& b) {
    a.Swap(&b);
  }
  inline void Swap(Verify* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Verify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Verify* New() const final {
    return new Verify();
  }

  Verify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Verify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Verify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Verify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Verify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "owlchat.Verify";
  }
  protected:
  explicit Verify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kMsgFieldNumber = 2,
    kSigFieldNumber = 3,
  };
  // bytes public_key = 1;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // bytes msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // bytes sig = 3;
  void clear_sig();
  const std::string& sig() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sig(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sig();
  PROTOBUF_MUST_USE_RESULT std::string* release_sig();
  void set_allocated_sig(std::string* sig);
  private:
  const std::string& _internal_sig() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sig(const std::string& value);
  std::string* _internal_mutable_sig();
  public:

  // @@protoc_insertion_point(class_scope:owlchat.Verify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sig_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_def_2eproto;
};
// -------------------------------------------------------------------

class DiffieHellmanKeyExchange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:owlchat.DiffieHellmanKeyExchange) */ {
 public:
  inline DiffieHellmanKeyExchange() : DiffieHellmanKeyExchange(nullptr) {}
  ~DiffieHellmanKeyExchange() override;
  explicit constexpr DiffieHellmanKeyExchange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiffieHellmanKeyExchange(const DiffieHellmanKeyExchange& from);
  DiffieHellmanKeyExchange(DiffieHellmanKeyExchange&& from) noexcept
    : DiffieHellmanKeyExchange() {
    *this = ::std::move(from);
  }

  inline DiffieHellmanKeyExchange& operator=(const DiffieHellmanKeyExchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiffieHellmanKeyExchange& operator=(DiffieHellmanKeyExchange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DiffieHellmanKeyExchange& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiffieHellmanKeyExchange* internal_default_instance() {
    return reinterpret_cast<const DiffieHellmanKeyExchange*>(
               &_DiffieHellmanKeyExchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DiffieHellmanKeyExchange& a, DiffieHellmanKeyExchange& b) {
    a.Swap(&b);
  }
  inline void Swap(DiffieHellmanKeyExchange* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiffieHellmanKeyExchange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DiffieHellmanKeyExchange* New() const final {
    return new DiffieHellmanKeyExchange();
  }

  DiffieHellmanKeyExchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DiffieHellmanKeyExchange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DiffieHellmanKeyExchange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DiffieHellmanKeyExchange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DiffieHellmanKeyExchange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "owlchat.DiffieHellmanKeyExchange";
  }
  protected:
  explicit DiffieHellmanKeyExchange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTheirPublicKeyFieldNumber = 1,
  };
  // bytes their_public_key = 1;
  void clear_their_public_key();
  const std::string& their_public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_their_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_their_public_key();
  PROTOBUF_MUST_USE_RESULT std::string* release_their_public_key();
  void set_allocated_their_public_key(std::string* their_public_key);
  private:
  const std::string& _internal_their_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_their_public_key(const std::string& value);
  std::string* _internal_mutable_their_public_key();
  public:

  // @@protoc_insertion_point(class_scope:owlchat.DiffieHellmanKeyExchange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr their_public_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_def_2eproto;
};
// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:owlchat.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit constexpr Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  enum BodyCase {
    kGenerateKeyPair = 1,
    kInitKeyPair = 2,
    kRestoreKeyPair = 3,
    kBackupKeyPair = 4,
    kValidateMnemonic = 5,
    kEncrypt = 6,
    kDecrypt = 7,
    kSign = 8,
    kVerify = 9,
    kDiffieHellmanKeyExchange = 10,
    BODY_NOT_SET = 0,
  };

  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return new Request();
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "owlchat.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenerateKeyPairFieldNumber = 1,
    kInitKeyPairFieldNumber = 2,
    kRestoreKeyPairFieldNumber = 3,
    kBackupKeyPairFieldNumber = 4,
    kValidateMnemonicFieldNumber = 5,
    kEncryptFieldNumber = 6,
    kDecryptFieldNumber = 7,
    kSignFieldNumber = 8,
    kVerifyFieldNumber = 9,
    kDiffieHellmanKeyExchangeFieldNumber = 10,
  };
  // .google.protobuf.Empty generate_key_pair = 1;
  bool has_generate_key_pair() const;
  private:
  bool _internal_has_generate_key_pair() const;
  public:
  void clear_generate_key_pair();
  const PROTOBUF_NAMESPACE_ID::Empty& generate_key_pair() const;
  PROTOBUF_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Empty* release_generate_key_pair();
  PROTOBUF_NAMESPACE_ID::Empty* mutable_generate_key_pair();
  void set_allocated_generate_key_pair(PROTOBUF_NAMESPACE_ID::Empty* generate_key_pair);
  private:
  const PROTOBUF_NAMESPACE_ID::Empty& _internal_generate_key_pair() const;
  PROTOBUF_NAMESPACE_ID::Empty* _internal_mutable_generate_key_pair();
  public:
  void unsafe_arena_set_allocated_generate_key_pair(
      PROTOBUF_NAMESPACE_ID::Empty* generate_key_pair);
  PROTOBUF_NAMESPACE_ID::Empty* unsafe_arena_release_generate_key_pair();

  // .owlchat.InitKeyPair init_key_pair = 2;
  bool has_init_key_pair() const;
  private:
  bool _internal_has_init_key_pair() const;
  public:
  void clear_init_key_pair();
  const ::owlchat::InitKeyPair& init_key_pair() const;
  PROTOBUF_MUST_USE_RESULT ::owlchat::InitKeyPair* release_init_key_pair();
  ::owlchat::InitKeyPair* mutable_init_key_pair();
  void set_allocated_init_key_pair(::owlchat::InitKeyPair* init_key_pair);
  private:
  const ::owlchat::InitKeyPair& _internal_init_key_pair() const;
  ::owlchat::InitKeyPair* _internal_mutable_init_key_pair();
  public:
  void unsafe_arena_set_allocated_init_key_pair(
      ::owlchat::InitKeyPair* init_key_pair);
  ::owlchat::InitKeyPair* unsafe_arena_release_init_key_pair();

  // .owlchat.RestoreKeyPair restore_key_pair = 3;
  bool has_restore_key_pair() const;
  private:
  bool _internal_has_restore_key_pair() const;
  public:
  void clear_restore_key_pair();
  const ::owlchat::RestoreKeyPair& restore_key_pair() const;
  PROTOBUF_MUST_USE_RESULT ::owlchat::RestoreKeyPair* release_restore_key_pair();
  ::owlchat::RestoreKeyPair* mutable_restore_key_pair();
  void set_allocated_restore_key_pair(::owlchat::RestoreKeyPair* restore_key_pair);
  private:
  const ::owlchat::RestoreKeyPair& _internal_restore_key_pair() const;
  ::owlchat::RestoreKeyPair* _internal_mutable_restore_key_pair();
  public:
  void unsafe_arena_set_allocated_restore_key_pair(
      ::owlchat::RestoreKeyPair* restore_key_pair);
  ::owlchat::RestoreKeyPair* unsafe_arena_release_restore_key_pair();

  // .owlchat.BackupKeyPair backup_key_pair = 4;
  bool has_backup_key_pair() const;
  private:
  bool _internal_has_backup_key_pair() const;
  public:
  void clear_backup_key_pair();
  const ::owlchat::BackupKeyPair& backup_key_pair() const;
  PROTOBUF_MUST_USE_RESULT ::owlchat::BackupKeyPair* release_backup_key_pair();
  ::owlchat::BackupKeyPair* mutable_backup_key_pair();
  void set_allocated_backup_key_pair(::owlchat::BackupKeyPair* backup_key_pair);
  private:
  const ::owlchat::BackupKeyPair& _internal_backup_key_pair() const;
  ::owlchat::BackupKeyPair* _internal_mutable_backup_key_pair();
  public:
  void unsafe_arena_set_allocated_backup_key_pair(
      ::owlchat::BackupKeyPair* backup_key_pair);
  ::owlchat::BackupKeyPair* unsafe_arena_release_backup_key_pair();

  // .owlchat.ValidateMnemonic validate_mnemonic = 5;
  bool has_validate_mnemonic() const;
  private:
  bool _internal_has_validate_mnemonic() const;
  public:
  void clear_validate_mnemonic();
  const ::owlchat::ValidateMnemonic& validate_mnemonic() const;
  PROTOBUF_MUST_USE_RESULT ::owlchat::ValidateMnemonic* release_validate_mnemonic();
  ::owlchat::ValidateMnemonic* mutable_validate_mnemonic();
  void set_allocated_validate_mnemonic(::owlchat::ValidateMnemonic* validate_mnemonic);
  private:
  const ::owlchat::ValidateMnemonic& _internal_validate_mnemonic() const;
  ::owlchat::ValidateMnemonic* _internal_mutable_validate_mnemonic();
  public:
  void unsafe_arena_set_allocated_validate_mnemonic(
      ::owlchat::ValidateMnemonic* validate_mnemonic);
  ::owlchat::ValidateMnemonic* unsafe_arena_release_validate_mnemonic();

  // .owlchat.Encrypt encrypt = 6;
  bool has_encrypt() const;
  private:
  bool _internal_has_encrypt() const;
  public:
  void clear_encrypt();
  const ::owlchat::Encrypt& encrypt() const;
  PROTOBUF_MUST_USE_RESULT ::owlchat::Encrypt* release_encrypt();
  ::owlchat::Encrypt* mutable_encrypt();
  void set_allocated_encrypt(::owlchat::Encrypt* encrypt);
  private:
  const ::owlchat::Encrypt& _internal_encrypt() const;
  ::owlchat::Encrypt* _internal_mutable_encrypt();
  public:
  void unsafe_arena_set_allocated_encrypt(
      ::owlchat::Encrypt* encrypt);
  ::owlchat::Encrypt* unsafe_arena_release_encrypt();

  // .owlchat.Decrypt decrypt = 7;
  bool has_decrypt() const;
  private:
  bool _internal_has_decrypt() const;
  public:
  void clear_decrypt();
  const ::owlchat::Decrypt& decrypt() const;
  PROTOBUF_MUST_USE_RESULT ::owlchat::Decrypt* release_decrypt();
  ::owlchat::Decrypt* mutable_decrypt();
  void set_allocated_decrypt(::owlchat::Decrypt* decrypt);
  private:
  const ::owlchat::Decrypt& _internal_decrypt() const;
  ::owlchat::Decrypt* _internal_mutable_decrypt();
  public:
  void unsafe_arena_set_allocated_decrypt(
      ::owlchat::Decrypt* decrypt);
  ::owlchat::Decrypt* unsafe_arena_release_decrypt();

  // .owlchat.Sign sign = 8;
  bool has_sign() const;
  private:
  bool _internal_has_sign() const;
  public:
  void clear_sign();
  const ::owlchat::Sign& sign() const;
  PROTOBUF_MUST_USE_RESULT ::owlchat::Sign* release_sign();
  ::owlchat::Sign* mutable_sign();
  void set_allocated_sign(::owlchat::Sign* sign);
  private:
  const ::owlchat::Sign& _internal_sign() const;
  ::owlchat::Sign* _internal_mutable_sign();
  public:
  void unsafe_arena_set_allocated_sign(
      ::owlchat::Sign* sign);
  ::owlchat::Sign* unsafe_arena_release_sign();

  // .owlchat.Verify verify = 9;
  bool has_verify() const;
  private:
  bool _internal_has_verify() const;
  public:
  void clear_verify();
  const ::owlchat::Verify& verify() const;
  PROTOBUF_MUST_USE_RESULT ::owlchat::Verify* release_verify();
  ::owlchat::Verify* mutable_verify();
  void set_allocated_verify(::owlchat::Verify* verify);
  private:
  const ::owlchat::Verify& _internal_verify() const;
  ::owlchat::Verify* _internal_mutable_verify();
  public:
  void unsafe_arena_set_allocated_verify(
      ::owlchat::Verify* verify);
  ::owlchat::Verify* unsafe_arena_release_verify();

  // .owlchat.DiffieHellmanKeyExchange diffie_hellman_key_exchange = 10;
  bool has_diffie_hellman_key_exchange() const;
  private:
  bool _internal_has_diffie_hellman_key_exchange() const;
  public:
  void clear_diffie_hellman_key_exchange();
  const ::owlchat::DiffieHellmanKeyExchange& diffie_hellman_key_exchange() const;
  PROTOBUF_MUST_USE_RESULT ::owlchat::DiffieHellmanKeyExchange* release_diffie_hellman_key_exchange();
  ::owlchat::DiffieHellmanKeyExchange* mutable_diffie_hellman_key_exchange();
  void set_allocated_diffie_hellman_key_exchange(::owlchat::DiffieHellmanKeyExchange* diffie_hellman_key_exchange);
  private:
  const ::owlchat::DiffieHellmanKeyExchange& _internal_diffie_hellman_key_exchange() const;
  ::owlchat::DiffieHellmanKeyExchange* _internal_mutable_diffie_hellman_key_exchange();
  public:
  void unsafe_arena_set_allocated_diffie_hellman_key_exchange(
      ::owlchat::DiffieHellmanKeyExchange* diffie_hellman_key_exchange);
  ::owlchat::DiffieHellmanKeyExchange* unsafe_arena_release_diffie_hellman_key_exchange();

  void clear_body();
  BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:owlchat.Request)
 private:
  class _Internal;
  void set_has_generate_key_pair();
  void set_has_init_key_pair();
  void set_has_restore_key_pair();
  void set_has_backup_key_pair();
  void set_has_validate_mnemonic();
  void set_has_encrypt();
  void set_has_decrypt();
  void set_has_sign();
  void set_has_verify();
  void set_has_diffie_hellman_key_exchange();

  inline bool has_body() const;
  inline void clear_has_body();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union BodyUnion {
    constexpr BodyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    PROTOBUF_NAMESPACE_ID::Empty* generate_key_pair_;
    ::owlchat::InitKeyPair* init_key_pair_;
    ::owlchat::RestoreKeyPair* restore_key_pair_;
    ::owlchat::BackupKeyPair* backup_key_pair_;
    ::owlchat::ValidateMnemonic* validate_mnemonic_;
    ::owlchat::Encrypt* encrypt_;
    ::owlchat::Decrypt* decrypt_;
    ::owlchat::Sign* sign_;
    ::owlchat::Verify* verify_;
    ::owlchat::DiffieHellmanKeyExchange* diffie_hellman_key_exchange_;
  } body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_def_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:owlchat.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit constexpr Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  enum BodyCase {
    kError = 1,
    kKeyPair = 2,
    kMnemonic = 3,
    kValidMnemonic = 4,
    kEncryptedMessage = 5,
    kDecryptedMessage = 6,
    kSignature = 7,
    kValidSignature = 8,
    kSharedSecret = 9,
    BODY_NOT_SET = 0,
  };

  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return new Response();
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Response& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "owlchat.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Response_Error Error;
  static constexpr Error UNKNOWN =
    Response_Error_UNKNOWN;
  static constexpr Error MISSING_REQUEST_BODY =
    Response_Error_MISSING_REQUEST_BODY;
  static constexpr Error INVALID_PUBLIC_KEY =
    Response_Error_INVALID_PUBLIC_KEY;
  static constexpr Error INVALID_SECRET_KEY =
    Response_Error_INVALID_SECRET_KEY;
  static constexpr Error INVALID_SIGNATURE =
    Response_Error_INVALID_SIGNATURE;
  static constexpr Error INVALID_SEED =
    Response_Error_INVALID_SEED;
  static constexpr Error INVALID_PAPER_KEY =
    Response_Error_INVALID_PAPER_KEY;
  static constexpr Error NOT_INITIALIZED =
    Response_Error_NOT_INITIALIZED;
  static inline bool Error_IsValid(int value) {
    return Response_Error_IsValid(value);
  }
  static constexpr Error Error_MIN =
    Response_Error_Error_MIN;
  static constexpr Error Error_MAX =
    Response_Error_Error_MAX;
  static constexpr int Error_ARRAYSIZE =
    Response_Error_Error_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Error_descriptor() {
    return Response_Error_descriptor();
  }
  template<typename T>
  static inline const std::string& Error_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Error>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Error_Name.");
    return Response_Error_Name(enum_t_value);
  }
  static inline bool Error_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Error* value) {
    return Response_Error_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kKeyPairFieldNumber = 2,
    kMnemonicFieldNumber = 3,
    kValidMnemonicFieldNumber = 4,
    kEncryptedMessageFieldNumber = 5,
    kDecryptedMessageFieldNumber = 6,
    kSignatureFieldNumber = 7,
    kValidSignatureFieldNumber = 8,
    kSharedSecretFieldNumber = 9,
  };
  // .owlchat.Response.Error error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  ::owlchat::Response_Error error() const;
  void set_error(::owlchat::Response_Error value);
  private:
  ::owlchat::Response_Error _internal_error() const;
  void _internal_set_error(::owlchat::Response_Error value);
  public:

  // .owlchat.KeyPair key_pair = 2;
  bool has_key_pair() const;
  private:
  bool _internal_has_key_pair() const;
  public:
  void clear_key_pair();
  const ::owlchat::KeyPair& key_pair() const;
  PROTOBUF_MUST_USE_RESULT ::owlchat::KeyPair* release_key_pair();
  ::owlchat::KeyPair* mutable_key_pair();
  void set_allocated_key_pair(::owlchat::KeyPair* key_pair);
  private:
  const ::owlchat::KeyPair& _internal_key_pair() const;
  ::owlchat::KeyPair* _internal_mutable_key_pair();
  public:
  void unsafe_arena_set_allocated_key_pair(
      ::owlchat::KeyPair* key_pair);
  ::owlchat::KeyPair* unsafe_arena_release_key_pair();

  // string mnemonic = 3;
  bool has_mnemonic() const;
  private:
  bool _internal_has_mnemonic() const;
  public:
  void clear_mnemonic();
  const std::string& mnemonic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mnemonic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mnemonic();
  PROTOBUF_MUST_USE_RESULT std::string* release_mnemonic();
  void set_allocated_mnemonic(std::string* mnemonic);
  private:
  const std::string& _internal_mnemonic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mnemonic(const std::string& value);
  std::string* _internal_mutable_mnemonic();
  public:

  // bool valid_mnemonic = 4;
  bool has_valid_mnemonic() const;
  private:
  bool _internal_has_valid_mnemonic() const;
  public:
  void clear_valid_mnemonic();
  bool valid_mnemonic() const;
  void set_valid_mnemonic(bool value);
  private:
  bool _internal_valid_mnemonic() const;
  void _internal_set_valid_mnemonic(bool value);
  public:

  // bytes encrypted_message = 5;
  bool has_encrypted_message() const;
  private:
  bool _internal_has_encrypted_message() const;
  public:
  void clear_encrypted_message();
  const std::string& encrypted_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_encrypted_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_encrypted_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_encrypted_message();
  void set_allocated_encrypted_message(std::string* encrypted_message);
  private:
  const std::string& _internal_encrypted_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_encrypted_message(const std::string& value);
  std::string* _internal_mutable_encrypted_message();
  public:

  // bytes decrypted_message = 6;
  bool has_decrypted_message() const;
  private:
  bool _internal_has_decrypted_message() const;
  public:
  void clear_decrypted_message();
  const std::string& decrypted_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_decrypted_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_decrypted_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_decrypted_message();
  void set_allocated_decrypted_message(std::string* decrypted_message);
  private:
  const std::string& _internal_decrypted_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_decrypted_message(const std::string& value);
  std::string* _internal_mutable_decrypted_message();
  public:

  // bytes signature = 7;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_MUST_USE_RESULT std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // bool valid_signature = 8;
  bool has_valid_signature() const;
  private:
  bool _internal_has_valid_signature() const;
  public:
  void clear_valid_signature();
  bool valid_signature() const;
  void set_valid_signature(bool value);
  private:
  bool _internal_valid_signature() const;
  void _internal_set_valid_signature(bool value);
  public:

  // bytes shared_secret = 9;
  bool has_shared_secret() const;
  private:
  bool _internal_has_shared_secret() const;
  public:
  void clear_shared_secret();
  const std::string& shared_secret() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shared_secret(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shared_secret();
  PROTOBUF_MUST_USE_RESULT std::string* release_shared_secret();
  void set_allocated_shared_secret(std::string* shared_secret);
  private:
  const std::string& _internal_shared_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shared_secret(const std::string& value);
  std::string* _internal_mutable_shared_secret();
  public:

  void clear_body();
  BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:owlchat.Response)
 private:
  class _Internal;
  void set_has_error();
  void set_has_key_pair();
  void set_has_mnemonic();
  void set_has_valid_mnemonic();
  void set_has_encrypted_message();
  void set_has_decrypted_message();
  void set_has_signature();
  void set_has_valid_signature();
  void set_has_shared_secret();

  inline bool has_body() const;
  inline void clear_has_body();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union BodyUnion {
    constexpr BodyUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    int error_;
    ::owlchat::KeyPair* key_pair_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mnemonic_;
    bool valid_mnemonic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encrypted_message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decrypted_message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    bool valid_signature_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shared_secret_;
  } body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_def_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyPair

// bytes public_key = 1;
inline void KeyPair::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& KeyPair::public_key() const {
  // @@protoc_insertion_point(field_get:owlchat.KeyPair.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyPair::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:owlchat.KeyPair.public_key)
}
inline std::string* KeyPair::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:owlchat.KeyPair.public_key)
  return _s;
}
inline const std::string& KeyPair::_internal_public_key() const {
  return public_key_.Get();
}
inline void KeyPair::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyPair::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyPair::release_public_key() {
  // @@protoc_insertion_point(field_release:owlchat.KeyPair.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyPair::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:owlchat.KeyPair.public_key)
}

// bytes secret_key = 2;
inline void KeyPair::clear_secret_key() {
  secret_key_.ClearToEmpty();
}
inline const std::string& KeyPair::secret_key() const {
  // @@protoc_insertion_point(field_get:owlchat.KeyPair.secret_key)
  return _internal_secret_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyPair::set_secret_key(ArgT0&& arg0, ArgT... args) {
 
 secret_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:owlchat.KeyPair.secret_key)
}
inline std::string* KeyPair::mutable_secret_key() {
  std::string* _s = _internal_mutable_secret_key();
  // @@protoc_insertion_point(field_mutable:owlchat.KeyPair.secret_key)
  return _s;
}
inline const std::string& KeyPair::_internal_secret_key() const {
  return secret_key_.Get();
}
inline void KeyPair::_internal_set_secret_key(const std::string& value) {
  
  secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyPair::_internal_mutable_secret_key() {
  
  return secret_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyPair::release_secret_key() {
  // @@protoc_insertion_point(field_release:owlchat.KeyPair.secret_key)
  return secret_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyPair::set_allocated_secret_key(std::string* secret_key) {
  if (secret_key != nullptr) {
    
  } else {
    
  }
  secret_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:owlchat.KeyPair.secret_key)
}

// bytes seed = 3;
inline void KeyPair::clear_seed() {
  seed_.ClearToEmpty();
}
inline const std::string& KeyPair::seed() const {
  // @@protoc_insertion_point(field_get:owlchat.KeyPair.seed)
  return _internal_seed();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyPair::set_seed(ArgT0&& arg0, ArgT... args) {
 
 seed_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:owlchat.KeyPair.seed)
}
inline std::string* KeyPair::mutable_seed() {
  std::string* _s = _internal_mutable_seed();
  // @@protoc_insertion_point(field_mutable:owlchat.KeyPair.seed)
  return _s;
}
inline const std::string& KeyPair::_internal_seed() const {
  return seed_.Get();
}
inline void KeyPair::_internal_set_seed(const std::string& value) {
  
  seed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KeyPair::_internal_mutable_seed() {
  
  return seed_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KeyPair::release_seed() {
  // @@protoc_insertion_point(field_release:owlchat.KeyPair.seed)
  return seed_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KeyPair::set_allocated_seed(std::string* seed) {
  if (seed != nullptr) {
    
  } else {
    
  }
  seed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), seed,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:owlchat.KeyPair.seed)
}

// -------------------------------------------------------------------

// InitKeyPair

// bytes secret_key = 1;
inline void InitKeyPair::clear_secret_key() {
  secret_key_.ClearToEmpty();
}
inline const std::string& InitKeyPair::secret_key() const {
  // @@protoc_insertion_point(field_get:owlchat.InitKeyPair.secret_key)
  return _internal_secret_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InitKeyPair::set_secret_key(ArgT0&& arg0, ArgT... args) {
 
 secret_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:owlchat.InitKeyPair.secret_key)
}
inline std::string* InitKeyPair::mutable_secret_key() {
  std::string* _s = _internal_mutable_secret_key();
  // @@protoc_insertion_point(field_mutable:owlchat.InitKeyPair.secret_key)
  return _s;
}
inline const std::string& InitKeyPair::_internal_secret_key() const {
  return secret_key_.Get();
}
inline void InitKeyPair::_internal_set_secret_key(const std::string& value) {
  
  secret_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InitKeyPair::_internal_mutable_secret_key() {
  
  return secret_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InitKeyPair::release_secret_key() {
  // @@protoc_insertion_point(field_release:owlchat.InitKeyPair.secret_key)
  return secret_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InitKeyPair::set_allocated_secret_key(std::string* secret_key) {
  if (secret_key != nullptr) {
    
  } else {
    
  }
  secret_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:owlchat.InitKeyPair.secret_key)
}

// -------------------------------------------------------------------

// RestoreKeyPair

// string paper_key = 1;
inline void RestoreKeyPair::clear_paper_key() {
  paper_key_.ClearToEmpty();
}
inline const std::string& RestoreKeyPair::paper_key() const {
  // @@protoc_insertion_point(field_get:owlchat.RestoreKeyPair.paper_key)
  return _internal_paper_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RestoreKeyPair::set_paper_key(ArgT0&& arg0, ArgT... args) {
 
 paper_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:owlchat.RestoreKeyPair.paper_key)
}
inline std::string* RestoreKeyPair::mutable_paper_key() {
  std::string* _s = _internal_mutable_paper_key();
  // @@protoc_insertion_point(field_mutable:owlchat.RestoreKeyPair.paper_key)
  return _s;
}
inline const std::string& RestoreKeyPair::_internal_paper_key() const {
  return paper_key_.Get();
}
inline void RestoreKeyPair::_internal_set_paper_key(const std::string& value) {
  
  paper_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RestoreKeyPair::_internal_mutable_paper_key() {
  
  return paper_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RestoreKeyPair::release_paper_key() {
  // @@protoc_insertion_point(field_release:owlchat.RestoreKeyPair.paper_key)
  return paper_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RestoreKeyPair::set_allocated_paper_key(std::string* paper_key) {
  if (paper_key != nullptr) {
    
  } else {
    
  }
  paper_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paper_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:owlchat.RestoreKeyPair.paper_key)
}

// -------------------------------------------------------------------

// BackupKeyPair

// bytes maybe_seed = 1;
inline void BackupKeyPair::clear_maybe_seed() {
  maybe_seed_.ClearToEmpty();
}
inline const std::string& BackupKeyPair::maybe_seed() const {
  // @@protoc_insertion_point(field_get:owlchat.BackupKeyPair.maybe_seed)
  return _internal_maybe_seed();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BackupKeyPair::set_maybe_seed(ArgT0&& arg0, ArgT... args) {
 
 maybe_seed_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:owlchat.BackupKeyPair.maybe_seed)
}
inline std::string* BackupKeyPair::mutable_maybe_seed() {
  std::string* _s = _internal_mutable_maybe_seed();
  // @@protoc_insertion_point(field_mutable:owlchat.BackupKeyPair.maybe_seed)
  return _s;
}
inline const std::string& BackupKeyPair::_internal_maybe_seed() const {
  return maybe_seed_.Get();
}
inline void BackupKeyPair::_internal_set_maybe_seed(const std::string& value) {
  
  maybe_seed_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BackupKeyPair::_internal_mutable_maybe_seed() {
  
  return maybe_seed_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BackupKeyPair::release_maybe_seed() {
  // @@protoc_insertion_point(field_release:owlchat.BackupKeyPair.maybe_seed)
  return maybe_seed_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BackupKeyPair::set_allocated_maybe_seed(std::string* maybe_seed) {
  if (maybe_seed != nullptr) {
    
  } else {
    
  }
  maybe_seed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maybe_seed,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:owlchat.BackupKeyPair.maybe_seed)
}

// -------------------------------------------------------------------

// ValidateMnemonic

// string phrase = 1;
inline void ValidateMnemonic::clear_phrase() {
  phrase_.ClearToEmpty();
}
inline const std::string& ValidateMnemonic::phrase() const {
  // @@protoc_insertion_point(field_get:owlchat.ValidateMnemonic.phrase)
  return _internal_phrase();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ValidateMnemonic::set_phrase(ArgT0&& arg0, ArgT... args) {
 
 phrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:owlchat.ValidateMnemonic.phrase)
}
inline std::string* ValidateMnemonic::mutable_phrase() {
  std::string* _s = _internal_mutable_phrase();
  // @@protoc_insertion_point(field_mutable:owlchat.ValidateMnemonic.phrase)
  return _s;
}
inline const std::string& ValidateMnemonic::_internal_phrase() const {
  return phrase_.Get();
}
inline void ValidateMnemonic::_internal_set_phrase(const std::string& value) {
  
  phrase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ValidateMnemonic::_internal_mutable_phrase() {
  
  return phrase_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ValidateMnemonic::release_phrase() {
  // @@protoc_insertion_point(field_release:owlchat.ValidateMnemonic.phrase)
  return phrase_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ValidateMnemonic::set_allocated_phrase(std::string* phrase) {
  if (phrase != nullptr) {
    
  } else {
    
  }
  phrase_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phrase,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:owlchat.ValidateMnemonic.phrase)
}

// -------------------------------------------------------------------

// Encrypt

// bytes plaintext = 1;
inline void Encrypt::clear_plaintext() {
  plaintext_.ClearToEmpty();
}
inline const std::string& Encrypt::plaintext() const {
  // @@protoc_insertion_point(field_get:owlchat.Encrypt.plaintext)
  return _internal_plaintext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Encrypt::set_plaintext(ArgT0&& arg0, ArgT... args) {
 
 plaintext_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:owlchat.Encrypt.plaintext)
}
inline std::string* Encrypt::mutable_plaintext() {
  std::string* _s = _internal_mutable_plaintext();
  // @@protoc_insertion_point(field_mutable:owlchat.Encrypt.plaintext)
  return _s;
}
inline const std::string& Encrypt::_internal_plaintext() const {
  return plaintext_.Get();
}
inline void Encrypt::_internal_set_plaintext(const std::string& value) {
  
  plaintext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Encrypt::_internal_mutable_plaintext() {
  
  return plaintext_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Encrypt::release_plaintext() {
  // @@protoc_insertion_point(field_release:owlchat.Encrypt.plaintext)
  return plaintext_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Encrypt::set_allocated_plaintext(std::string* plaintext) {
  if (plaintext != nullptr) {
    
  } else {
    
  }
  plaintext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintext,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:owlchat.Encrypt.plaintext)
}

// -------------------------------------------------------------------

// Decrypt

// bytes ciphertext = 1;
inline void Decrypt::clear_ciphertext() {
  ciphertext_.ClearToEmpty();
}
inline const std::string& Decrypt::ciphertext() const {
  // @@protoc_insertion_point(field_get:owlchat.Decrypt.ciphertext)
  return _internal_ciphertext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Decrypt::set_ciphertext(ArgT0&& arg0, ArgT... args) {
 
 ciphertext_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:owlchat.Decrypt.ciphertext)
}
inline std::string* Decrypt::mutable_ciphertext() {
  std::string* _s = _internal_mutable_ciphertext();
  // @@protoc_insertion_point(field_mutable:owlchat.Decrypt.ciphertext)
  return _s;
}
inline const std::string& Decrypt::_internal_ciphertext() const {
  return ciphertext_.Get();
}
inline void Decrypt::_internal_set_ciphertext(const std::string& value) {
  
  ciphertext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Decrypt::_internal_mutable_ciphertext() {
  
  return ciphertext_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Decrypt::release_ciphertext() {
  // @@protoc_insertion_point(field_release:owlchat.Decrypt.ciphertext)
  return ciphertext_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Decrypt::set_allocated_ciphertext(std::string* ciphertext) {
  if (ciphertext != nullptr) {
    
  } else {
    
  }
  ciphertext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ciphertext,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:owlchat.Decrypt.ciphertext)
}

// -------------------------------------------------------------------

// Sign

// bytes msg = 1;
inline void Sign::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& Sign::msg() const {
  // @@protoc_insertion_point(field_get:owlchat.Sign.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Sign::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:owlchat.Sign.msg)
}
inline std::string* Sign::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:owlchat.Sign.msg)
  return _s;
}
inline const std::string& Sign::_internal_msg() const {
  return msg_.Get();
}
inline void Sign::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Sign::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Sign::release_msg() {
  // @@protoc_insertion_point(field_release:owlchat.Sign.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Sign::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:owlchat.Sign.msg)
}

// -------------------------------------------------------------------

// Verify

// bytes public_key = 1;
inline void Verify::clear_public_key() {
  public_key_.ClearToEmpty();
}
inline const std::string& Verify::public_key() const {
  // @@protoc_insertion_point(field_get:owlchat.Verify.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Verify::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 public_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:owlchat.Verify.public_key)
}
inline std::string* Verify::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:owlchat.Verify.public_key)
  return _s;
}
inline const std::string& Verify::_internal_public_key() const {
  return public_key_.Get();
}
inline void Verify::_internal_set_public_key(const std::string& value) {
  
  public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Verify::_internal_mutable_public_key() {
  
  return public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Verify::release_public_key() {
  // @@protoc_insertion_point(field_release:owlchat.Verify.public_key)
  return public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Verify::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:owlchat.Verify.public_key)
}

// bytes msg = 2;
inline void Verify::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& Verify::msg() const {
  // @@protoc_insertion_point(field_get:owlchat.Verify.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Verify::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:owlchat.Verify.msg)
}
inline std::string* Verify::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:owlchat.Verify.msg)
  return _s;
}
inline const std::string& Verify::_internal_msg() const {
  return msg_.Get();
}
inline void Verify::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Verify::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Verify::release_msg() {
  // @@protoc_insertion_point(field_release:owlchat.Verify.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Verify::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:owlchat.Verify.msg)
}

// bytes sig = 3;
inline void Verify::clear_sig() {
  sig_.ClearToEmpty();
}
inline const std::string& Verify::sig() const {
  // @@protoc_insertion_point(field_get:owlchat.Verify.sig)
  return _internal_sig();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Verify::set_sig(ArgT0&& arg0, ArgT... args) {
 
 sig_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:owlchat.Verify.sig)
}
inline std::string* Verify::mutable_sig() {
  std::string* _s = _internal_mutable_sig();
  // @@protoc_insertion_point(field_mutable:owlchat.Verify.sig)
  return _s;
}
inline const std::string& Verify::_internal_sig() const {
  return sig_.Get();
}
inline void Verify::_internal_set_sig(const std::string& value) {
  
  sig_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Verify::_internal_mutable_sig() {
  
  return sig_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Verify::release_sig() {
  // @@protoc_insertion_point(field_release:owlchat.Verify.sig)
  return sig_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Verify::set_allocated_sig(std::string* sig) {
  if (sig != nullptr) {
    
  } else {
    
  }
  sig_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sig,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:owlchat.Verify.sig)
}

// -------------------------------------------------------------------

// DiffieHellmanKeyExchange

// bytes their_public_key = 1;
inline void DiffieHellmanKeyExchange::clear_their_public_key() {
  their_public_key_.ClearToEmpty();
}
inline const std::string& DiffieHellmanKeyExchange::their_public_key() const {
  // @@protoc_insertion_point(field_get:owlchat.DiffieHellmanKeyExchange.their_public_key)
  return _internal_their_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiffieHellmanKeyExchange::set_their_public_key(ArgT0&& arg0, ArgT... args) {
 
 their_public_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:owlchat.DiffieHellmanKeyExchange.their_public_key)
}
inline std::string* DiffieHellmanKeyExchange::mutable_their_public_key() {
  std::string* _s = _internal_mutable_their_public_key();
  // @@protoc_insertion_point(field_mutable:owlchat.DiffieHellmanKeyExchange.their_public_key)
  return _s;
}
inline const std::string& DiffieHellmanKeyExchange::_internal_their_public_key() const {
  return their_public_key_.Get();
}
inline void DiffieHellmanKeyExchange::_internal_set_their_public_key(const std::string& value) {
  
  their_public_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DiffieHellmanKeyExchange::_internal_mutable_their_public_key() {
  
  return their_public_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DiffieHellmanKeyExchange::release_their_public_key() {
  // @@protoc_insertion_point(field_release:owlchat.DiffieHellmanKeyExchange.their_public_key)
  return their_public_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DiffieHellmanKeyExchange::set_allocated_their_public_key(std::string* their_public_key) {
  if (their_public_key != nullptr) {
    
  } else {
    
  }
  their_public_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), their_public_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:owlchat.DiffieHellmanKeyExchange.their_public_key)
}

// -------------------------------------------------------------------

// Request

// .google.protobuf.Empty generate_key_pair = 1;
inline bool Request::_internal_has_generate_key_pair() const {
  return body_case() == kGenerateKeyPair;
}
inline bool Request::has_generate_key_pair() const {
  return _internal_has_generate_key_pair();
}
inline void Request::set_has_generate_key_pair() {
  _oneof_case_[0] = kGenerateKeyPair;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Request::release_generate_key_pair() {
  // @@protoc_insertion_point(field_release:owlchat.Request.generate_key_pair)
  if (_internal_has_generate_key_pair()) {
    clear_has_body();
      PROTOBUF_NAMESPACE_ID::Empty* temp = body_.generate_key_pair_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.generate_key_pair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Request::_internal_generate_key_pair() const {
  return _internal_has_generate_key_pair()
      ? *body_.generate_key_pair_
      : reinterpret_cast< PROTOBUF_NAMESPACE_ID::Empty&>(PROTOBUF_NAMESPACE_ID::_Empty_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Empty& Request::generate_key_pair() const {
  // @@protoc_insertion_point(field_get:owlchat.Request.generate_key_pair)
  return _internal_generate_key_pair();
}
inline PROTOBUF_NAMESPACE_ID::Empty* Request::unsafe_arena_release_generate_key_pair() {
  // @@protoc_insertion_point(field_unsafe_arena_release:owlchat.Request.generate_key_pair)
  if (_internal_has_generate_key_pair()) {
    clear_has_body();
    PROTOBUF_NAMESPACE_ID::Empty* temp = body_.generate_key_pair_;
    body_.generate_key_pair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_generate_key_pair(PROTOBUF_NAMESPACE_ID::Empty* generate_key_pair) {
  clear_body();
  if (generate_key_pair) {
    set_has_generate_key_pair();
    body_.generate_key_pair_ = generate_key_pair;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:owlchat.Request.generate_key_pair)
}
inline PROTOBUF_NAMESPACE_ID::Empty* Request::_internal_mutable_generate_key_pair() {
  if (!_internal_has_generate_key_pair()) {
    clear_body();
    set_has_generate_key_pair();
    body_.generate_key_pair_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Empty >(GetArenaForAllocation());
  }
  return body_.generate_key_pair_;
}
inline PROTOBUF_NAMESPACE_ID::Empty* Request::mutable_generate_key_pair() {
  PROTOBUF_NAMESPACE_ID::Empty* _msg = _internal_mutable_generate_key_pair();
  // @@protoc_insertion_point(field_mutable:owlchat.Request.generate_key_pair)
  return _msg;
}

// .owlchat.InitKeyPair init_key_pair = 2;
inline bool Request::_internal_has_init_key_pair() const {
  return body_case() == kInitKeyPair;
}
inline bool Request::has_init_key_pair() const {
  return _internal_has_init_key_pair();
}
inline void Request::set_has_init_key_pair() {
  _oneof_case_[0] = kInitKeyPair;
}
inline void Request::clear_init_key_pair() {
  if (_internal_has_init_key_pair()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.init_key_pair_;
    }
    clear_has_body();
  }
}
inline ::owlchat::InitKeyPair* Request::release_init_key_pair() {
  // @@protoc_insertion_point(field_release:owlchat.Request.init_key_pair)
  if (_internal_has_init_key_pair()) {
    clear_has_body();
      ::owlchat::InitKeyPair* temp = body_.init_key_pair_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.init_key_pair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::owlchat::InitKeyPair& Request::_internal_init_key_pair() const {
  return _internal_has_init_key_pair()
      ? *body_.init_key_pair_
      : reinterpret_cast< ::owlchat::InitKeyPair&>(::owlchat::_InitKeyPair_default_instance_);
}
inline const ::owlchat::InitKeyPair& Request::init_key_pair() const {
  // @@protoc_insertion_point(field_get:owlchat.Request.init_key_pair)
  return _internal_init_key_pair();
}
inline ::owlchat::InitKeyPair* Request::unsafe_arena_release_init_key_pair() {
  // @@protoc_insertion_point(field_unsafe_arena_release:owlchat.Request.init_key_pair)
  if (_internal_has_init_key_pair()) {
    clear_has_body();
    ::owlchat::InitKeyPair* temp = body_.init_key_pair_;
    body_.init_key_pair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_init_key_pair(::owlchat::InitKeyPair* init_key_pair) {
  clear_body();
  if (init_key_pair) {
    set_has_init_key_pair();
    body_.init_key_pair_ = init_key_pair;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:owlchat.Request.init_key_pair)
}
inline ::owlchat::InitKeyPair* Request::_internal_mutable_init_key_pair() {
  if (!_internal_has_init_key_pair()) {
    clear_body();
    set_has_init_key_pair();
    body_.init_key_pair_ = CreateMaybeMessage< ::owlchat::InitKeyPair >(GetArenaForAllocation());
  }
  return body_.init_key_pair_;
}
inline ::owlchat::InitKeyPair* Request::mutable_init_key_pair() {
  ::owlchat::InitKeyPair* _msg = _internal_mutable_init_key_pair();
  // @@protoc_insertion_point(field_mutable:owlchat.Request.init_key_pair)
  return _msg;
}

// .owlchat.RestoreKeyPair restore_key_pair = 3;
inline bool Request::_internal_has_restore_key_pair() const {
  return body_case() == kRestoreKeyPair;
}
inline bool Request::has_restore_key_pair() const {
  return _internal_has_restore_key_pair();
}
inline void Request::set_has_restore_key_pair() {
  _oneof_case_[0] = kRestoreKeyPair;
}
inline void Request::clear_restore_key_pair() {
  if (_internal_has_restore_key_pair()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.restore_key_pair_;
    }
    clear_has_body();
  }
}
inline ::owlchat::RestoreKeyPair* Request::release_restore_key_pair() {
  // @@protoc_insertion_point(field_release:owlchat.Request.restore_key_pair)
  if (_internal_has_restore_key_pair()) {
    clear_has_body();
      ::owlchat::RestoreKeyPair* temp = body_.restore_key_pair_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.restore_key_pair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::owlchat::RestoreKeyPair& Request::_internal_restore_key_pair() const {
  return _internal_has_restore_key_pair()
      ? *body_.restore_key_pair_
      : reinterpret_cast< ::owlchat::RestoreKeyPair&>(::owlchat::_RestoreKeyPair_default_instance_);
}
inline const ::owlchat::RestoreKeyPair& Request::restore_key_pair() const {
  // @@protoc_insertion_point(field_get:owlchat.Request.restore_key_pair)
  return _internal_restore_key_pair();
}
inline ::owlchat::RestoreKeyPair* Request::unsafe_arena_release_restore_key_pair() {
  // @@protoc_insertion_point(field_unsafe_arena_release:owlchat.Request.restore_key_pair)
  if (_internal_has_restore_key_pair()) {
    clear_has_body();
    ::owlchat::RestoreKeyPair* temp = body_.restore_key_pair_;
    body_.restore_key_pair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_restore_key_pair(::owlchat::RestoreKeyPair* restore_key_pair) {
  clear_body();
  if (restore_key_pair) {
    set_has_restore_key_pair();
    body_.restore_key_pair_ = restore_key_pair;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:owlchat.Request.restore_key_pair)
}
inline ::owlchat::RestoreKeyPair* Request::_internal_mutable_restore_key_pair() {
  if (!_internal_has_restore_key_pair()) {
    clear_body();
    set_has_restore_key_pair();
    body_.restore_key_pair_ = CreateMaybeMessage< ::owlchat::RestoreKeyPair >(GetArenaForAllocation());
  }
  return body_.restore_key_pair_;
}
inline ::owlchat::RestoreKeyPair* Request::mutable_restore_key_pair() {
  ::owlchat::RestoreKeyPair* _msg = _internal_mutable_restore_key_pair();
  // @@protoc_insertion_point(field_mutable:owlchat.Request.restore_key_pair)
  return _msg;
}

// .owlchat.BackupKeyPair backup_key_pair = 4;
inline bool Request::_internal_has_backup_key_pair() const {
  return body_case() == kBackupKeyPair;
}
inline bool Request::has_backup_key_pair() const {
  return _internal_has_backup_key_pair();
}
inline void Request::set_has_backup_key_pair() {
  _oneof_case_[0] = kBackupKeyPair;
}
inline void Request::clear_backup_key_pair() {
  if (_internal_has_backup_key_pair()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.backup_key_pair_;
    }
    clear_has_body();
  }
}
inline ::owlchat::BackupKeyPair* Request::release_backup_key_pair() {
  // @@protoc_insertion_point(field_release:owlchat.Request.backup_key_pair)
  if (_internal_has_backup_key_pair()) {
    clear_has_body();
      ::owlchat::BackupKeyPair* temp = body_.backup_key_pair_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.backup_key_pair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::owlchat::BackupKeyPair& Request::_internal_backup_key_pair() const {
  return _internal_has_backup_key_pair()
      ? *body_.backup_key_pair_
      : reinterpret_cast< ::owlchat::BackupKeyPair&>(::owlchat::_BackupKeyPair_default_instance_);
}
inline const ::owlchat::BackupKeyPair& Request::backup_key_pair() const {
  // @@protoc_insertion_point(field_get:owlchat.Request.backup_key_pair)
  return _internal_backup_key_pair();
}
inline ::owlchat::BackupKeyPair* Request::unsafe_arena_release_backup_key_pair() {
  // @@protoc_insertion_point(field_unsafe_arena_release:owlchat.Request.backup_key_pair)
  if (_internal_has_backup_key_pair()) {
    clear_has_body();
    ::owlchat::BackupKeyPair* temp = body_.backup_key_pair_;
    body_.backup_key_pair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_backup_key_pair(::owlchat::BackupKeyPair* backup_key_pair) {
  clear_body();
  if (backup_key_pair) {
    set_has_backup_key_pair();
    body_.backup_key_pair_ = backup_key_pair;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:owlchat.Request.backup_key_pair)
}
inline ::owlchat::BackupKeyPair* Request::_internal_mutable_backup_key_pair() {
  if (!_internal_has_backup_key_pair()) {
    clear_body();
    set_has_backup_key_pair();
    body_.backup_key_pair_ = CreateMaybeMessage< ::owlchat::BackupKeyPair >(GetArenaForAllocation());
  }
  return body_.backup_key_pair_;
}
inline ::owlchat::BackupKeyPair* Request::mutable_backup_key_pair() {
  ::owlchat::BackupKeyPair* _msg = _internal_mutable_backup_key_pair();
  // @@protoc_insertion_point(field_mutable:owlchat.Request.backup_key_pair)
  return _msg;
}

// .owlchat.ValidateMnemonic validate_mnemonic = 5;
inline bool Request::_internal_has_validate_mnemonic() const {
  return body_case() == kValidateMnemonic;
}
inline bool Request::has_validate_mnemonic() const {
  return _internal_has_validate_mnemonic();
}
inline void Request::set_has_validate_mnemonic() {
  _oneof_case_[0] = kValidateMnemonic;
}
inline void Request::clear_validate_mnemonic() {
  if (_internal_has_validate_mnemonic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.validate_mnemonic_;
    }
    clear_has_body();
  }
}
inline ::owlchat::ValidateMnemonic* Request::release_validate_mnemonic() {
  // @@protoc_insertion_point(field_release:owlchat.Request.validate_mnemonic)
  if (_internal_has_validate_mnemonic()) {
    clear_has_body();
      ::owlchat::ValidateMnemonic* temp = body_.validate_mnemonic_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.validate_mnemonic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::owlchat::ValidateMnemonic& Request::_internal_validate_mnemonic() const {
  return _internal_has_validate_mnemonic()
      ? *body_.validate_mnemonic_
      : reinterpret_cast< ::owlchat::ValidateMnemonic&>(::owlchat::_ValidateMnemonic_default_instance_);
}
inline const ::owlchat::ValidateMnemonic& Request::validate_mnemonic() const {
  // @@protoc_insertion_point(field_get:owlchat.Request.validate_mnemonic)
  return _internal_validate_mnemonic();
}
inline ::owlchat::ValidateMnemonic* Request::unsafe_arena_release_validate_mnemonic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:owlchat.Request.validate_mnemonic)
  if (_internal_has_validate_mnemonic()) {
    clear_has_body();
    ::owlchat::ValidateMnemonic* temp = body_.validate_mnemonic_;
    body_.validate_mnemonic_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_validate_mnemonic(::owlchat::ValidateMnemonic* validate_mnemonic) {
  clear_body();
  if (validate_mnemonic) {
    set_has_validate_mnemonic();
    body_.validate_mnemonic_ = validate_mnemonic;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:owlchat.Request.validate_mnemonic)
}
inline ::owlchat::ValidateMnemonic* Request::_internal_mutable_validate_mnemonic() {
  if (!_internal_has_validate_mnemonic()) {
    clear_body();
    set_has_validate_mnemonic();
    body_.validate_mnemonic_ = CreateMaybeMessage< ::owlchat::ValidateMnemonic >(GetArenaForAllocation());
  }
  return body_.validate_mnemonic_;
}
inline ::owlchat::ValidateMnemonic* Request::mutable_validate_mnemonic() {
  ::owlchat::ValidateMnemonic* _msg = _internal_mutable_validate_mnemonic();
  // @@protoc_insertion_point(field_mutable:owlchat.Request.validate_mnemonic)
  return _msg;
}

// .owlchat.Encrypt encrypt = 6;
inline bool Request::_internal_has_encrypt() const {
  return body_case() == kEncrypt;
}
inline bool Request::has_encrypt() const {
  return _internal_has_encrypt();
}
inline void Request::set_has_encrypt() {
  _oneof_case_[0] = kEncrypt;
}
inline void Request::clear_encrypt() {
  if (_internal_has_encrypt()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.encrypt_;
    }
    clear_has_body();
  }
}
inline ::owlchat::Encrypt* Request::release_encrypt() {
  // @@protoc_insertion_point(field_release:owlchat.Request.encrypt)
  if (_internal_has_encrypt()) {
    clear_has_body();
      ::owlchat::Encrypt* temp = body_.encrypt_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.encrypt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::owlchat::Encrypt& Request::_internal_encrypt() const {
  return _internal_has_encrypt()
      ? *body_.encrypt_
      : reinterpret_cast< ::owlchat::Encrypt&>(::owlchat::_Encrypt_default_instance_);
}
inline const ::owlchat::Encrypt& Request::encrypt() const {
  // @@protoc_insertion_point(field_get:owlchat.Request.encrypt)
  return _internal_encrypt();
}
inline ::owlchat::Encrypt* Request::unsafe_arena_release_encrypt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:owlchat.Request.encrypt)
  if (_internal_has_encrypt()) {
    clear_has_body();
    ::owlchat::Encrypt* temp = body_.encrypt_;
    body_.encrypt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_encrypt(::owlchat::Encrypt* encrypt) {
  clear_body();
  if (encrypt) {
    set_has_encrypt();
    body_.encrypt_ = encrypt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:owlchat.Request.encrypt)
}
inline ::owlchat::Encrypt* Request::_internal_mutable_encrypt() {
  if (!_internal_has_encrypt()) {
    clear_body();
    set_has_encrypt();
    body_.encrypt_ = CreateMaybeMessage< ::owlchat::Encrypt >(GetArenaForAllocation());
  }
  return body_.encrypt_;
}
inline ::owlchat::Encrypt* Request::mutable_encrypt() {
  ::owlchat::Encrypt* _msg = _internal_mutable_encrypt();
  // @@protoc_insertion_point(field_mutable:owlchat.Request.encrypt)
  return _msg;
}

// .owlchat.Decrypt decrypt = 7;
inline bool Request::_internal_has_decrypt() const {
  return body_case() == kDecrypt;
}
inline bool Request::has_decrypt() const {
  return _internal_has_decrypt();
}
inline void Request::set_has_decrypt() {
  _oneof_case_[0] = kDecrypt;
}
inline void Request::clear_decrypt() {
  if (_internal_has_decrypt()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.decrypt_;
    }
    clear_has_body();
  }
}
inline ::owlchat::Decrypt* Request::release_decrypt() {
  // @@protoc_insertion_point(field_release:owlchat.Request.decrypt)
  if (_internal_has_decrypt()) {
    clear_has_body();
      ::owlchat::Decrypt* temp = body_.decrypt_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.decrypt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::owlchat::Decrypt& Request::_internal_decrypt() const {
  return _internal_has_decrypt()
      ? *body_.decrypt_
      : reinterpret_cast< ::owlchat::Decrypt&>(::owlchat::_Decrypt_default_instance_);
}
inline const ::owlchat::Decrypt& Request::decrypt() const {
  // @@protoc_insertion_point(field_get:owlchat.Request.decrypt)
  return _internal_decrypt();
}
inline ::owlchat::Decrypt* Request::unsafe_arena_release_decrypt() {
  // @@protoc_insertion_point(field_unsafe_arena_release:owlchat.Request.decrypt)
  if (_internal_has_decrypt()) {
    clear_has_body();
    ::owlchat::Decrypt* temp = body_.decrypt_;
    body_.decrypt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_decrypt(::owlchat::Decrypt* decrypt) {
  clear_body();
  if (decrypt) {
    set_has_decrypt();
    body_.decrypt_ = decrypt;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:owlchat.Request.decrypt)
}
inline ::owlchat::Decrypt* Request::_internal_mutable_decrypt() {
  if (!_internal_has_decrypt()) {
    clear_body();
    set_has_decrypt();
    body_.decrypt_ = CreateMaybeMessage< ::owlchat::Decrypt >(GetArenaForAllocation());
  }
  return body_.decrypt_;
}
inline ::owlchat::Decrypt* Request::mutable_decrypt() {
  ::owlchat::Decrypt* _msg = _internal_mutable_decrypt();
  // @@protoc_insertion_point(field_mutable:owlchat.Request.decrypt)
  return _msg;
}

// .owlchat.Sign sign = 8;
inline bool Request::_internal_has_sign() const {
  return body_case() == kSign;
}
inline bool Request::has_sign() const {
  return _internal_has_sign();
}
inline void Request::set_has_sign() {
  _oneof_case_[0] = kSign;
}
inline void Request::clear_sign() {
  if (_internal_has_sign()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.sign_;
    }
    clear_has_body();
  }
}
inline ::owlchat::Sign* Request::release_sign() {
  // @@protoc_insertion_point(field_release:owlchat.Request.sign)
  if (_internal_has_sign()) {
    clear_has_body();
      ::owlchat::Sign* temp = body_.sign_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.sign_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::owlchat::Sign& Request::_internal_sign() const {
  return _internal_has_sign()
      ? *body_.sign_
      : reinterpret_cast< ::owlchat::Sign&>(::owlchat::_Sign_default_instance_);
}
inline const ::owlchat::Sign& Request::sign() const {
  // @@protoc_insertion_point(field_get:owlchat.Request.sign)
  return _internal_sign();
}
inline ::owlchat::Sign* Request::unsafe_arena_release_sign() {
  // @@protoc_insertion_point(field_unsafe_arena_release:owlchat.Request.sign)
  if (_internal_has_sign()) {
    clear_has_body();
    ::owlchat::Sign* temp = body_.sign_;
    body_.sign_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_sign(::owlchat::Sign* sign) {
  clear_body();
  if (sign) {
    set_has_sign();
    body_.sign_ = sign;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:owlchat.Request.sign)
}
inline ::owlchat::Sign* Request::_internal_mutable_sign() {
  if (!_internal_has_sign()) {
    clear_body();
    set_has_sign();
    body_.sign_ = CreateMaybeMessage< ::owlchat::Sign >(GetArenaForAllocation());
  }
  return body_.sign_;
}
inline ::owlchat::Sign* Request::mutable_sign() {
  ::owlchat::Sign* _msg = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:owlchat.Request.sign)
  return _msg;
}

// .owlchat.Verify verify = 9;
inline bool Request::_internal_has_verify() const {
  return body_case() == kVerify;
}
inline bool Request::has_verify() const {
  return _internal_has_verify();
}
inline void Request::set_has_verify() {
  _oneof_case_[0] = kVerify;
}
inline void Request::clear_verify() {
  if (_internal_has_verify()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.verify_;
    }
    clear_has_body();
  }
}
inline ::owlchat::Verify* Request::release_verify() {
  // @@protoc_insertion_point(field_release:owlchat.Request.verify)
  if (_internal_has_verify()) {
    clear_has_body();
      ::owlchat::Verify* temp = body_.verify_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.verify_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::owlchat::Verify& Request::_internal_verify() const {
  return _internal_has_verify()
      ? *body_.verify_
      : reinterpret_cast< ::owlchat::Verify&>(::owlchat::_Verify_default_instance_);
}
inline const ::owlchat::Verify& Request::verify() const {
  // @@protoc_insertion_point(field_get:owlchat.Request.verify)
  return _internal_verify();
}
inline ::owlchat::Verify* Request::unsafe_arena_release_verify() {
  // @@protoc_insertion_point(field_unsafe_arena_release:owlchat.Request.verify)
  if (_internal_has_verify()) {
    clear_has_body();
    ::owlchat::Verify* temp = body_.verify_;
    body_.verify_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_verify(::owlchat::Verify* verify) {
  clear_body();
  if (verify) {
    set_has_verify();
    body_.verify_ = verify;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:owlchat.Request.verify)
}
inline ::owlchat::Verify* Request::_internal_mutable_verify() {
  if (!_internal_has_verify()) {
    clear_body();
    set_has_verify();
    body_.verify_ = CreateMaybeMessage< ::owlchat::Verify >(GetArenaForAllocation());
  }
  return body_.verify_;
}
inline ::owlchat::Verify* Request::mutable_verify() {
  ::owlchat::Verify* _msg = _internal_mutable_verify();
  // @@protoc_insertion_point(field_mutable:owlchat.Request.verify)
  return _msg;
}

// .owlchat.DiffieHellmanKeyExchange diffie_hellman_key_exchange = 10;
inline bool Request::_internal_has_diffie_hellman_key_exchange() const {
  return body_case() == kDiffieHellmanKeyExchange;
}
inline bool Request::has_diffie_hellman_key_exchange() const {
  return _internal_has_diffie_hellman_key_exchange();
}
inline void Request::set_has_diffie_hellman_key_exchange() {
  _oneof_case_[0] = kDiffieHellmanKeyExchange;
}
inline void Request::clear_diffie_hellman_key_exchange() {
  if (_internal_has_diffie_hellman_key_exchange()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.diffie_hellman_key_exchange_;
    }
    clear_has_body();
  }
}
inline ::owlchat::DiffieHellmanKeyExchange* Request::release_diffie_hellman_key_exchange() {
  // @@protoc_insertion_point(field_release:owlchat.Request.diffie_hellman_key_exchange)
  if (_internal_has_diffie_hellman_key_exchange()) {
    clear_has_body();
      ::owlchat::DiffieHellmanKeyExchange* temp = body_.diffie_hellman_key_exchange_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.diffie_hellman_key_exchange_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::owlchat::DiffieHellmanKeyExchange& Request::_internal_diffie_hellman_key_exchange() const {
  return _internal_has_diffie_hellman_key_exchange()
      ? *body_.diffie_hellman_key_exchange_
      : reinterpret_cast< ::owlchat::DiffieHellmanKeyExchange&>(::owlchat::_DiffieHellmanKeyExchange_default_instance_);
}
inline const ::owlchat::DiffieHellmanKeyExchange& Request::diffie_hellman_key_exchange() const {
  // @@protoc_insertion_point(field_get:owlchat.Request.diffie_hellman_key_exchange)
  return _internal_diffie_hellman_key_exchange();
}
inline ::owlchat::DiffieHellmanKeyExchange* Request::unsafe_arena_release_diffie_hellman_key_exchange() {
  // @@protoc_insertion_point(field_unsafe_arena_release:owlchat.Request.diffie_hellman_key_exchange)
  if (_internal_has_diffie_hellman_key_exchange()) {
    clear_has_body();
    ::owlchat::DiffieHellmanKeyExchange* temp = body_.diffie_hellman_key_exchange_;
    body_.diffie_hellman_key_exchange_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_diffie_hellman_key_exchange(::owlchat::DiffieHellmanKeyExchange* diffie_hellman_key_exchange) {
  clear_body();
  if (diffie_hellman_key_exchange) {
    set_has_diffie_hellman_key_exchange();
    body_.diffie_hellman_key_exchange_ = diffie_hellman_key_exchange;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:owlchat.Request.diffie_hellman_key_exchange)
}
inline ::owlchat::DiffieHellmanKeyExchange* Request::_internal_mutable_diffie_hellman_key_exchange() {
  if (!_internal_has_diffie_hellman_key_exchange()) {
    clear_body();
    set_has_diffie_hellman_key_exchange();
    body_.diffie_hellman_key_exchange_ = CreateMaybeMessage< ::owlchat::DiffieHellmanKeyExchange >(GetArenaForAllocation());
  }
  return body_.diffie_hellman_key_exchange_;
}
inline ::owlchat::DiffieHellmanKeyExchange* Request::mutable_diffie_hellman_key_exchange() {
  ::owlchat::DiffieHellmanKeyExchange* _msg = _internal_mutable_diffie_hellman_key_exchange();
  // @@protoc_insertion_point(field_mutable:owlchat.Request.diffie_hellman_key_exchange)
  return _msg;
}

inline bool Request::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void Request::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline Request::BodyCase Request::body_case() const {
  return Request::BodyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response

// .owlchat.Response.Error error = 1;
inline bool Response::_internal_has_error() const {
  return body_case() == kError;
}
inline bool Response::has_error() const {
  return _internal_has_error();
}
inline void Response::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void Response::clear_error() {
  if (_internal_has_error()) {
    body_.error_ = 0;
    clear_has_body();
  }
}
inline ::owlchat::Response_Error Response::_internal_error() const {
  if (_internal_has_error()) {
    return static_cast< ::owlchat::Response_Error >(body_.error_);
  }
  return static_cast< ::owlchat::Response_Error >(0);
}
inline ::owlchat::Response_Error Response::error() const {
  // @@protoc_insertion_point(field_get:owlchat.Response.error)
  return _internal_error();
}
inline void Response::_internal_set_error(::owlchat::Response_Error value) {
  if (!_internal_has_error()) {
    clear_body();
    set_has_error();
  }
  body_.error_ = value;
}
inline void Response::set_error(::owlchat::Response_Error value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:owlchat.Response.error)
}

// .owlchat.KeyPair key_pair = 2;
inline bool Response::_internal_has_key_pair() const {
  return body_case() == kKeyPair;
}
inline bool Response::has_key_pair() const {
  return _internal_has_key_pair();
}
inline void Response::set_has_key_pair() {
  _oneof_case_[0] = kKeyPair;
}
inline void Response::clear_key_pair() {
  if (_internal_has_key_pair()) {
    if (GetArenaForAllocation() == nullptr) {
      delete body_.key_pair_;
    }
    clear_has_body();
  }
}
inline ::owlchat::KeyPair* Response::release_key_pair() {
  // @@protoc_insertion_point(field_release:owlchat.Response.key_pair)
  if (_internal_has_key_pair()) {
    clear_has_body();
      ::owlchat::KeyPair* temp = body_.key_pair_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    body_.key_pair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::owlchat::KeyPair& Response::_internal_key_pair() const {
  return _internal_has_key_pair()
      ? *body_.key_pair_
      : reinterpret_cast< ::owlchat::KeyPair&>(::owlchat::_KeyPair_default_instance_);
}
inline const ::owlchat::KeyPair& Response::key_pair() const {
  // @@protoc_insertion_point(field_get:owlchat.Response.key_pair)
  return _internal_key_pair();
}
inline ::owlchat::KeyPair* Response::unsafe_arena_release_key_pair() {
  // @@protoc_insertion_point(field_unsafe_arena_release:owlchat.Response.key_pair)
  if (_internal_has_key_pair()) {
    clear_has_body();
    ::owlchat::KeyPair* temp = body_.key_pair_;
    body_.key_pair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_key_pair(::owlchat::KeyPair* key_pair) {
  clear_body();
  if (key_pair) {
    set_has_key_pair();
    body_.key_pair_ = key_pair;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:owlchat.Response.key_pair)
}
inline ::owlchat::KeyPair* Response::_internal_mutable_key_pair() {
  if (!_internal_has_key_pair()) {
    clear_body();
    set_has_key_pair();
    body_.key_pair_ = CreateMaybeMessage< ::owlchat::KeyPair >(GetArenaForAllocation());
  }
  return body_.key_pair_;
}
inline ::owlchat::KeyPair* Response::mutable_key_pair() {
  ::owlchat::KeyPair* _msg = _internal_mutable_key_pair();
  // @@protoc_insertion_point(field_mutable:owlchat.Response.key_pair)
  return _msg;
}

// string mnemonic = 3;
inline bool Response::_internal_has_mnemonic() const {
  return body_case() == kMnemonic;
}
inline bool Response::has_mnemonic() const {
  return _internal_has_mnemonic();
}
inline void Response::set_has_mnemonic() {
  _oneof_case_[0] = kMnemonic;
}
inline void Response::clear_mnemonic() {
  if (_internal_has_mnemonic()) {
    body_.mnemonic_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_body();
  }
}
inline const std::string& Response::mnemonic() const {
  // @@protoc_insertion_point(field_get:owlchat.Response.mnemonic)
  return _internal_mnemonic();
}
template <typename ArgT0, typename... ArgT>
inline void Response::set_mnemonic(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_mnemonic()) {
    clear_body();
    set_has_mnemonic();
    body_.mnemonic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.mnemonic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:owlchat.Response.mnemonic)
}
inline std::string* Response::mutable_mnemonic() {
  std::string* _s = _internal_mutable_mnemonic();
  // @@protoc_insertion_point(field_mutable:owlchat.Response.mnemonic)
  return _s;
}
inline const std::string& Response::_internal_mnemonic() const {
  if (_internal_has_mnemonic()) {
    return body_.mnemonic_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Response::_internal_set_mnemonic(const std::string& value) {
  if (!_internal_has_mnemonic()) {
    clear_body();
    set_has_mnemonic();
    body_.mnemonic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.mnemonic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_mnemonic() {
  if (!_internal_has_mnemonic()) {
    clear_body();
    set_has_mnemonic();
    body_.mnemonic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return body_.mnemonic_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Response::release_mnemonic() {
  // @@protoc_insertion_point(field_release:owlchat.Response.mnemonic)
  if (_internal_has_mnemonic()) {
    clear_has_body();
    return body_.mnemonic_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Response::set_allocated_mnemonic(std::string* mnemonic) {
  if (has_body()) {
    clear_body();
  }
  if (mnemonic != nullptr) {
    set_has_mnemonic();
    body_.mnemonic_.UnsafeSetDefault(mnemonic);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(mnemonic);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:owlchat.Response.mnemonic)
}

// bool valid_mnemonic = 4;
inline bool Response::_internal_has_valid_mnemonic() const {
  return body_case() == kValidMnemonic;
}
inline bool Response::has_valid_mnemonic() const {
  return _internal_has_valid_mnemonic();
}
inline void Response::set_has_valid_mnemonic() {
  _oneof_case_[0] = kValidMnemonic;
}
inline void Response::clear_valid_mnemonic() {
  if (_internal_has_valid_mnemonic()) {
    body_.valid_mnemonic_ = false;
    clear_has_body();
  }
}
inline bool Response::_internal_valid_mnemonic() const {
  if (_internal_has_valid_mnemonic()) {
    return body_.valid_mnemonic_;
  }
  return false;
}
inline void Response::_internal_set_valid_mnemonic(bool value) {
  if (!_internal_has_valid_mnemonic()) {
    clear_body();
    set_has_valid_mnemonic();
  }
  body_.valid_mnemonic_ = value;
}
inline bool Response::valid_mnemonic() const {
  // @@protoc_insertion_point(field_get:owlchat.Response.valid_mnemonic)
  return _internal_valid_mnemonic();
}
inline void Response::set_valid_mnemonic(bool value) {
  _internal_set_valid_mnemonic(value);
  // @@protoc_insertion_point(field_set:owlchat.Response.valid_mnemonic)
}

// bytes encrypted_message = 5;
inline bool Response::_internal_has_encrypted_message() const {
  return body_case() == kEncryptedMessage;
}
inline bool Response::has_encrypted_message() const {
  return _internal_has_encrypted_message();
}
inline void Response::set_has_encrypted_message() {
  _oneof_case_[0] = kEncryptedMessage;
}
inline void Response::clear_encrypted_message() {
  if (_internal_has_encrypted_message()) {
    body_.encrypted_message_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_body();
  }
}
inline const std::string& Response::encrypted_message() const {
  // @@protoc_insertion_point(field_get:owlchat.Response.encrypted_message)
  return _internal_encrypted_message();
}
template <typename ArgT0, typename... ArgT>
inline void Response::set_encrypted_message(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_encrypted_message()) {
    clear_body();
    set_has_encrypted_message();
    body_.encrypted_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.encrypted_message_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:owlchat.Response.encrypted_message)
}
inline std::string* Response::mutable_encrypted_message() {
  std::string* _s = _internal_mutable_encrypted_message();
  // @@protoc_insertion_point(field_mutable:owlchat.Response.encrypted_message)
  return _s;
}
inline const std::string& Response::_internal_encrypted_message() const {
  if (_internal_has_encrypted_message()) {
    return body_.encrypted_message_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Response::_internal_set_encrypted_message(const std::string& value) {
  if (!_internal_has_encrypted_message()) {
    clear_body();
    set_has_encrypted_message();
    body_.encrypted_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.encrypted_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_encrypted_message() {
  if (!_internal_has_encrypted_message()) {
    clear_body();
    set_has_encrypted_message();
    body_.encrypted_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return body_.encrypted_message_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Response::release_encrypted_message() {
  // @@protoc_insertion_point(field_release:owlchat.Response.encrypted_message)
  if (_internal_has_encrypted_message()) {
    clear_has_body();
    return body_.encrypted_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Response::set_allocated_encrypted_message(std::string* encrypted_message) {
  if (has_body()) {
    clear_body();
  }
  if (encrypted_message != nullptr) {
    set_has_encrypted_message();
    body_.encrypted_message_.UnsafeSetDefault(encrypted_message);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(encrypted_message);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:owlchat.Response.encrypted_message)
}

// bytes decrypted_message = 6;
inline bool Response::_internal_has_decrypted_message() const {
  return body_case() == kDecryptedMessage;
}
inline bool Response::has_decrypted_message() const {
  return _internal_has_decrypted_message();
}
inline void Response::set_has_decrypted_message() {
  _oneof_case_[0] = kDecryptedMessage;
}
inline void Response::clear_decrypted_message() {
  if (_internal_has_decrypted_message()) {
    body_.decrypted_message_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_body();
  }
}
inline const std::string& Response::decrypted_message() const {
  // @@protoc_insertion_point(field_get:owlchat.Response.decrypted_message)
  return _internal_decrypted_message();
}
template <typename ArgT0, typename... ArgT>
inline void Response::set_decrypted_message(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_decrypted_message()) {
    clear_body();
    set_has_decrypted_message();
    body_.decrypted_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.decrypted_message_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:owlchat.Response.decrypted_message)
}
inline std::string* Response::mutable_decrypted_message() {
  std::string* _s = _internal_mutable_decrypted_message();
  // @@protoc_insertion_point(field_mutable:owlchat.Response.decrypted_message)
  return _s;
}
inline const std::string& Response::_internal_decrypted_message() const {
  if (_internal_has_decrypted_message()) {
    return body_.decrypted_message_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Response::_internal_set_decrypted_message(const std::string& value) {
  if (!_internal_has_decrypted_message()) {
    clear_body();
    set_has_decrypted_message();
    body_.decrypted_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.decrypted_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_decrypted_message() {
  if (!_internal_has_decrypted_message()) {
    clear_body();
    set_has_decrypted_message();
    body_.decrypted_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return body_.decrypted_message_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Response::release_decrypted_message() {
  // @@protoc_insertion_point(field_release:owlchat.Response.decrypted_message)
  if (_internal_has_decrypted_message()) {
    clear_has_body();
    return body_.decrypted_message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Response::set_allocated_decrypted_message(std::string* decrypted_message) {
  if (has_body()) {
    clear_body();
  }
  if (decrypted_message != nullptr) {
    set_has_decrypted_message();
    body_.decrypted_message_.UnsafeSetDefault(decrypted_message);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(decrypted_message);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:owlchat.Response.decrypted_message)
}

// bytes signature = 7;
inline bool Response::_internal_has_signature() const {
  return body_case() == kSignature;
}
inline bool Response::has_signature() const {
  return _internal_has_signature();
}
inline void Response::set_has_signature() {
  _oneof_case_[0] = kSignature;
}
inline void Response::clear_signature() {
  if (_internal_has_signature()) {
    body_.signature_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_body();
  }
}
inline const std::string& Response::signature() const {
  // @@protoc_insertion_point(field_get:owlchat.Response.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline void Response::set_signature(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_signature()) {
    clear_body();
    set_has_signature();
    body_.signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:owlchat.Response.signature)
}
inline std::string* Response::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:owlchat.Response.signature)
  return _s;
}
inline const std::string& Response::_internal_signature() const {
  if (_internal_has_signature()) {
    return body_.signature_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Response::_internal_set_signature(const std::string& value) {
  if (!_internal_has_signature()) {
    clear_body();
    set_has_signature();
    body_.signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_signature() {
  if (!_internal_has_signature()) {
    clear_body();
    set_has_signature();
    body_.signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return body_.signature_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Response::release_signature() {
  // @@protoc_insertion_point(field_release:owlchat.Response.signature)
  if (_internal_has_signature()) {
    clear_has_body();
    return body_.signature_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Response::set_allocated_signature(std::string* signature) {
  if (has_body()) {
    clear_body();
  }
  if (signature != nullptr) {
    set_has_signature();
    body_.signature_.UnsafeSetDefault(signature);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(signature);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:owlchat.Response.signature)
}

// bool valid_signature = 8;
inline bool Response::_internal_has_valid_signature() const {
  return body_case() == kValidSignature;
}
inline bool Response::has_valid_signature() const {
  return _internal_has_valid_signature();
}
inline void Response::set_has_valid_signature() {
  _oneof_case_[0] = kValidSignature;
}
inline void Response::clear_valid_signature() {
  if (_internal_has_valid_signature()) {
    body_.valid_signature_ = false;
    clear_has_body();
  }
}
inline bool Response::_internal_valid_signature() const {
  if (_internal_has_valid_signature()) {
    return body_.valid_signature_;
  }
  return false;
}
inline void Response::_internal_set_valid_signature(bool value) {
  if (!_internal_has_valid_signature()) {
    clear_body();
    set_has_valid_signature();
  }
  body_.valid_signature_ = value;
}
inline bool Response::valid_signature() const {
  // @@protoc_insertion_point(field_get:owlchat.Response.valid_signature)
  return _internal_valid_signature();
}
inline void Response::set_valid_signature(bool value) {
  _internal_set_valid_signature(value);
  // @@protoc_insertion_point(field_set:owlchat.Response.valid_signature)
}

// bytes shared_secret = 9;
inline bool Response::_internal_has_shared_secret() const {
  return body_case() == kSharedSecret;
}
inline bool Response::has_shared_secret() const {
  return _internal_has_shared_secret();
}
inline void Response::set_has_shared_secret() {
  _oneof_case_[0] = kSharedSecret;
}
inline void Response::clear_shared_secret() {
  if (_internal_has_shared_secret()) {
    body_.shared_secret_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_body();
  }
}
inline const std::string& Response::shared_secret() const {
  // @@protoc_insertion_point(field_get:owlchat.Response.shared_secret)
  return _internal_shared_secret();
}
template <typename ArgT0, typename... ArgT>
inline void Response::set_shared_secret(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_shared_secret()) {
    clear_body();
    set_has_shared_secret();
    body_.shared_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.shared_secret_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:owlchat.Response.shared_secret)
}
inline std::string* Response::mutable_shared_secret() {
  std::string* _s = _internal_mutable_shared_secret();
  // @@protoc_insertion_point(field_mutable:owlchat.Response.shared_secret)
  return _s;
}
inline const std::string& Response::_internal_shared_secret() const {
  if (_internal_has_shared_secret()) {
    return body_.shared_secret_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Response::_internal_set_shared_secret(const std::string& value) {
  if (!_internal_has_shared_secret()) {
    clear_body();
    set_has_shared_secret();
    body_.shared_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  body_.shared_secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_shared_secret() {
  if (!_internal_has_shared_secret()) {
    clear_body();
    set_has_shared_secret();
    body_.shared_secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return body_.shared_secret_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Response::release_shared_secret() {
  // @@protoc_insertion_point(field_release:owlchat.Response.shared_secret)
  if (_internal_has_shared_secret()) {
    clear_has_body();
    return body_.shared_secret_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Response::set_allocated_shared_secret(std::string* shared_secret) {
  if (has_body()) {
    clear_body();
  }
  if (shared_secret != nullptr) {
    set_has_shared_secret();
    body_.shared_secret_.UnsafeSetDefault(shared_secret);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(shared_secret);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:owlchat.Response.shared_secret)
}

inline bool Response::has_body() const {
  return body_case() != BODY_NOT_SET;
}
inline void Response::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline Response::BodyCase Response::body_case() const {
  return Response::BodyCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace owlchat

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::owlchat::Response_Error> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::owlchat::Response_Error>() {
  return ::owlchat::Response_Error_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_def_2eproto
